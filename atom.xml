<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-27T14:48:02.208Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ximoxiyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js30系列03</title>
    <link href="http://yoursite.com/2020/03/27/js30%E7%B3%BB%E5%88%9703/"/>
    <id>http://yoursite.com/2020/03/27/js30%E7%B3%BB%E5%88%9703/</id>
    <published>2020-03-27T14:48:02.000Z</published>
    <updated>2020-03-27T14:48:02.208Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/26/hello-world/"/>
    <id>http://yoursite.com/2020/03/26/hello-world/</id>
    <published>2020-03-26T09:06:32.000Z</published>
    <updated>2020-03-26T09:06:34.340Z</updated>
    
    <content type="html"><![CDATA[<p>图片引用格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure><p><img src="/images/img.jpg" alt="你好"></p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;图片引用格式&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>js30系列02</title>
    <link href="http://yoursite.com/2020/03/26/js30%E7%B3%BB%E5%88%9702/"/>
    <id>http://yoursite.com/2020/03/26/js30%E7%B3%BB%E5%88%9702/</id>
    <published>2020-03-26T09:05:01.000Z</published>
    <updated>2020-03-27T14:41:20.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="04-07-数组Array"><a href="#04-07-数组Array" class="headerlink" title="04+07 数组Array"></a><a href="https://github.com/ximoxiyu/JavaScript30/tree/master/04%20-%20Array%20Cardio%20Day%201" target="_blank" rel="noopener">04+07 数组Array</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">Array</a></p><p>Array对象–构造数组的全局对象<br>2个属性：Array.length<br>Array.prototype //通过数组的原型对象可以为所有数组对象添加属性。所有数组实例都会从 Array.prototype 继承属性和方法。修改 Array 的原型会影响到所有的数组实例<br>方法：<br>Array.prototype.sort()//对数组元素进行排序，并返回当前数组。<br>Array.prototype.splice()//任意的位置给数组添加或删除任意个元素。<br>Array.prototype.reverse()//颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。<br>【迭代方法】<br>Array.prototype.forEach()//数组中的每个元素执行一次回调函数<br>Array.prototype.every()//【每个】数组中的每个元素都满足测试函数，则返回 true，否则返回 false<br>Array.prototype.some()//【某个】数组中至少有一个元素满足测试函数，则返回 true，否则返回 false<br>Array.prototype.filter()//所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回<br>Array.prototype.find()//找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。<br>Array.prototype.findIndex() //找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。<br>Array.prototype.map()//返回一个由回调函数的返回值组成的新数组。<br>Array.prototype.reduce()//从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值</p><p><img src="/images/js30/4_7.png" alt="效果"></p><a id="more"></a><h2 id="05照片墙-弹性盒子"><a href="#05照片墙-弹性盒子" class="headerlink" title="05照片墙+弹性盒子"></a><a href="https://github.com/ximoxiyu/JavaScript30/tree/master/05%20-%20Flex%20Panel%20Gallery" target="_blank" rel="noopener">05照片墙+弹性盒子</a></h2><p>【html】父.panels的div块–5个小div，内部分别有3个p元素<br>【css】</p><ol><li>min-height:100vh;//vh表示相对视窗高度</li><li>过渡效果 transition:<pre><code>font-size 0.7s cubic-bezier(0.61,-0.19, 0.7,-0.11),flex 0.7s cubic-bezier(0.61,-0.19, 0.7,-0.11),background 0.2s;</code></pre></li><li>每一个子div盒子设置为弹性盒子，三个子元素p用flex=1;将宽度均分，justify-conten+flex-direction确定相对位置</li><li>.panel &gt; * {} //类元素下所有元素</li><li>.panel p:nth-child(2) {}//每个小块下的第二个p</li><li>.panel.open {}与.cta{}</li><li>transform: translateY(100%);//向Y轴移动，设置为了让一开始只有中间P显示在页面内</li><li>改变效果transform ： none ;    也就是：  transform: rotate | scale | skew | translate |matrix; //空格隔开<br><a href="https://blog.csdn.net/dongfanghaoyu/article/details/9253913" target="_blank" rel="noopener">transition&amp;transform</a><br><a href="https://segmentfault.com/q/1010000004080910" target="_blank" rel="noopener">flex:1</a>运用 flex 可以使各个元素按一定比例占据页面<br><img src="/images/js30/5.png" alt="效果"><!--more-->【总结】<br>element.classList.toggle()//在元素中切换类名，有就删除，没有就添加;重点是改CSS<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">//1.获取所有类名为 panel 的元素</span><br><span class="line">//匹配指定 CSS 选择器的所有元素</span><br><span class="line">const panels = document.querySelectorAll(<span class="string">'.panel'</span>);</span><br><span class="line">// 2.为其添加 click 事件监听，编写触发事件调用的函数（给触发的 DOM 元素添加/去掉样式，实现拉伸/压缩的效果）</span><br><span class="line">panels.forEach(panel=&gt;panel.onclick=<span class="keyword">function</span>(e)&#123;</span><br><span class="line">  //添加类名</span><br><span class="line">  console.log(this);</span><br><span class="line">   this.classList.toggle(<span class="string">'open'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="难06-Fetch-filter快速匹配古诗"><a href="#难06-Fetch-filter快速匹配古诗" class="headerlink" title="难06.Fetch+filter快速匹配古诗"></a>难<a href="https://github.com/ximoxiyu/JavaScript30/tree/master/06%20-%20Type%20Ahead" target="_blank" rel="noopener">06.Fetch+filter快速匹配古诗</a></h2>【考察】 Ajax，json,异步操作，Promise，Array与正则</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API" target="_blank" rel="noopener">Fetch API</a>提供了一个获取资源的接口（包括跨域请求）,提供全局方法fetch();接受 (资源的路径)作为参数，返回值是一个 Promise 对象。若请求成功，这个对象包含了（对应 Request 的）Response，但这只是一个 HTTP 响应。<br>fetch(input, init).then(function(response) { … });<br>常用的方法还有：blob()、text()、arrayBuffer()、formData()和json()</li><li>正则表达式<br>正则表达式的 match() 可以执行数据匹配，我们再结合 Array.filter() 便能筛出整个数组中，满足条件的项，再经过字符串处理即可输出到页面。<br>【html】form:input(输入框)与ul(列表展示)<br>input标签内placeholder 属性适用类型：text, search, url, telephone, email 以及 password。<br>表：输入字段预期值<br>诗句的来源 json 数据是加载页面时从网络中异步获得<br><img src="/images/js30/6.png" alt="效果"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const endpoint = <span class="string">'https://gist.githubusercontent.com/soyaine/81399bb2b24ca1bb5313e1985533c640/raw/bdf7df2cbcf70706c4a5e51a7dfb8c933ed78878/TangPoetry.json'</span>;</span><br><span class="line"></span><br><span class="line">      // fetch(资源路径).<span class="keyword">then</span>(<span class="keyword">function</span>(response) &#123; ... &#125;);ES6写法</span><br><span class="line">      //1.声明一个空数组，用于存放解析 json 后的数据</span><br><span class="line">      const poetrys = [];</span><br><span class="line">      // 异步获取数据并解析,运用 fetch() 发送 HTTP 请求,获取返回的 Promise 对象,解析 JSON 数据,存入数组poetrys</span><br><span class="line">      fetch(endpoint)</span><br><span class="line">          .<span class="keyword">then</span>(blob =&gt; blob.json())</span><br><span class="line">          .<span class="keyword">then</span>(data =&gt; poetrys.push(...data));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      //先声明函数，方便后面事件绑定</span><br><span class="line"></span><br><span class="line">      // 匹配输入的函数:运用 filter() 过滤数组数据,创建正则表达式，构造过滤条件</span><br><span class="line">      <span class="keyword">function</span> findMatches(wordToMatch, poetrys) &#123;</span><br><span class="line">          <span class="built_in">return</span> poetrys.filter(poet =&gt; &#123;</span><br><span class="line">              //正则找出匹配诗句</span><br><span class="line">              //  在js中提供了一个内置构造函数RegExp来创建一个正则对象</span><br><span class="line">              const regex = new RegExp(wordToMatch, <span class="string">'gi'</span>);</span><br><span class="line">              const author = poet.detail_author.join(<span class="string">''</span>);</span><br><span class="line">              <span class="built_in">return</span> poet.detail_text.match(regex) || poet.title.match(regex) || author.match(regex);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      // 展示匹配结果函数:获取匹配数据,替换关键词放入高亮的标签,构造 HTML 标签数据,将匹配值的 HTML 标签放入 &lt;ul&gt; 中</span><br><span class="line">      <span class="keyword">function</span> <span class="function"><span class="title">displayMatches</span></span>() &#123;</span><br><span class="line">          // 获取匹配数据</span><br><span class="line">          const matches = findMatches(this.value, poetrys);</span><br><span class="line">          const regex = new RegExp(this.value, <span class="string">'gi'</span>);</span><br><span class="line">          const html = matches.map(poet =&gt; &#123;</span><br><span class="line">              //替换高亮标签</span><br><span class="line">              const text = poet.detail_text.replace(regex, `&lt;span class=<span class="string">"h1"</span>&gt;<span class="variable">$&#123;this.value&#125;</span>&lt;/span&gt;`);</span><br><span class="line">              const title = poet.title.replace(regex, `&lt;span class=<span class="string">"hl"</span>&gt;<span class="variable">$&#123;this.value&#125;</span>&lt;/span&gt;`);</span><br><span class="line">              //构造HTML值</span><br><span class="line">              <span class="built_in">return</span> `</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;span class=<span class="string">"poet"</span>&gt;<span class="variable">$&#123; text&#125;</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">"title"</span>&gt;<span class="variable">$&#123; title&#125;</span> - <span class="variable">$&#123;poet.detail_author[0]&#125;</span>&lt;/span&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">`;</span><br><span class="line">          &#125;).join(<span class="string">''</span>);</span><br><span class="line">          ulSuggestions.innerHTML = html;</span><br><span class="line">      &#125;</span><br><span class="line">      //2.获取两个主要 HTML 元素（&lt;input&gt;，&lt;ul&gt;），给 &lt;input&gt; 添加事件监听（change, keyup）均触发同一个函数</span><br><span class="line">      const inputSearch = document.querySelector(<span class="string">'.search'</span>);</span><br><span class="line">      const ulSuggestions = document.querySelector(<span class="string">'.suggestions'</span>);</span><br><span class="line">      inputSearch.addEventListener(<span class="string">'change'</span>, displayMatches);</span><br><span class="line">      inputSearch.addEventListener(<span class="string">'keyup'</span>, displayMatches);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;04-07-数组Array&quot;&gt;&lt;a href=&quot;#04-07-数组Array&quot; class=&quot;headerlink&quot; title=&quot;04+07 数组Array&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ximoxiyu/JavaScript30/tree/master/04%20-%20Array%20Cardio%20Day%201&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;04+07 数组Array&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Array&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Array对象–构造数组的全局对象&lt;br&gt;2个属性：Array.length&lt;br&gt;Array.prototype //通过数组的原型对象可以为所有数组对象添加属性。所有数组实例都会从 Array.prototype 继承属性和方法。修改 Array 的原型会影响到所有的数组实例&lt;br&gt;方法：&lt;br&gt;Array.prototype.sort()//对数组元素进行排序，并返回当前数组。&lt;br&gt;Array.prototype.splice()//任意的位置给数组添加或删除任意个元素。&lt;br&gt;Array.prototype.reverse()//颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。&lt;br&gt;【迭代方法】&lt;br&gt;Array.prototype.forEach()//数组中的每个元素执行一次回调函数&lt;br&gt;Array.prototype.every()//【每个】数组中的每个元素都满足测试函数，则返回 true，否则返回 false&lt;br&gt;Array.prototype.some()//【某个】数组中至少有一个元素满足测试函数，则返回 true，否则返回 false&lt;br&gt;Array.prototype.filter()//所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回&lt;br&gt;Array.prototype.find()//找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。&lt;br&gt;Array.prototype.findIndex() //找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。&lt;br&gt;Array.prototype.map()//返回一个由回调函数的返回值组成的新数组。&lt;br&gt;Array.prototype.reduce()//从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/js30/4_7.png&quot; alt=&quot;效果&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="js30" scheme="http://yoursite.com/tags/js30/"/>
    
  </entry>
  
  <entry>
    <title>js30系列01</title>
    <link href="http://yoursite.com/2020/03/23/js30%E7%B3%BB%E5%88%9701/"/>
    <id>http://yoursite.com/2020/03/23/js30%E7%B3%BB%E5%88%9701/</id>
    <published>2020-03-23T13:04:31.000Z</published>
    <updated>2020-03-26T10:43:00.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-打鼓"><a href="#01-打鼓" class="headerlink" title="01 打鼓"></a>01 <a href="https://github.com/ximoxiyu/JavaScript30/tree/master/01%20-%20JavaScript%20Drum%20Kit" target="_blank" rel="noopener">打鼓</a></h2><p>【基本思路】<br>触发键盘按键ASDFGHJKL,进行audio播放与样式的改变,结束后触发transitionend事件去除样式;<br>【html】一大块div(keys)内含9小块div(key)，每小块div有自身的键码data-key与音频sound;<br>每个按键码对应一个audio标签，进行指定音频【注：音频地址为本地sounds文件夹】</p><a id="more"></a><p>【css】<br>1)样式背景属性<a href="https://blog.csdn.net/qq_27674439/article/details/90674949" target="_blank" rel="noopener">background</a><br>我只设置了图片与位置,大小;注意：position与size使用时加/<br>2)高亮样式.playing由动态添加<br>3) /* 复合属性，含四个子属性，所用属性在0.07秒内匀速变化 */<br>  transition:all .07s;<br>4)设置英文字母为大写text-transform: uppercase;</p><p>【重点-JS】<br>两个事件：键盘keydown事件与transitionend事件<br>keydown事件：按键后audio.play()与增加样式<br>transitionend事件:获取所有按键，移出新样式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//监听键盘事件</span><br><span class="line">window.onkeydown =<span class="keyword">function</span> (e) &#123; </span><br><span class="line">    // 1.获取键码--获取音频与DIV元素</span><br><span class="line">    const audio=document.querySelector(`audio[data-key=<span class="string">"<span class="variable">$&#123;event.keyCode&#125;</span>"</span>]`);</span><br><span class="line">    const key=document.querySelector(`div[data-key=<span class="string">"<span class="variable">$&#123;event.keyCode&#125;</span>"</span>]`);</span><br><span class="line">    // 2.处理元素:播放音频，添加样式</span><br><span class="line">    // <span class="keyword">if</span>(!audio) <span class="built_in">return</span>;//处理无效按键</span><br><span class="line">    key.classList.add(<span class="string">'playing'</span>);//每个按键添加类名--添样式</span><br><span class="line">    //没有此语句时，按住不放是一声一声，加上后是连续鼓点</span><br><span class="line">    audio.currentTime = 0; // 每次播放之后都使音频播放进度归零=按键按住不放时，马上响起连续鼓点声</span><br><span class="line">    audio.play();//音频播放</span><br><span class="line">&#125;;</span><br><span class="line">// document.querySelectorAll()返回的不是一个数组，而是一个NodeList;不可遍历，所以使用Array.from转化成数组</span><br><span class="line">//获取页面上所有按键,为其添加transitionend 的事件，去除样式</span><br><span class="line">const keys = Array.from(document.querySelectorAll(<span class="string">'.key'</span>));</span><br><span class="line">//遍历元素触发事件</span><br><span class="line">keys.forEach(key=&gt;key.ontransitionend=<span class="keyword">function</span>(event)&#123;</span><br><span class="line">  // 过滤其中一种事件</span><br><span class="line">    <span class="keyword">if</span>(event.propertyName !=<span class="string">"transform"</span>)</span><br><span class="line">    <span class="built_in">return</span>;</span><br><span class="line">      //去除样式</span><br><span class="line">    event.target.classList.remove(<span class="string">'playing'</span>);</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>【易错点】</p><ol><li>keys.forEach();//forEach后面直接加()</li><li>模板字面量–模板字符串的标识<br><code>字符串 ${ 变量、属性名 }</code><br>const audio=document.querySelector(`audio[data-key=”${event.keyCode}”]//为什么加了””?</li></ol><hr><h2 id="02-纯-JS、CSS-时钟"><a href="#02-纯-JS、CSS-时钟" class="headerlink" title="02 纯 JS、CSS 时钟"></a>02 <a href="https://github.com/ximoxiyu/JavaScript30/tree/master/02%20-%20JS%20%2B%20CSS%20Clock" target="_blank" rel="noopener">纯 JS、CSS 时钟</a></h2><p>目的：动态更新指针位置<br>关键：指针的旋转与获取实时时间，每转一秒改变一次指针状态–类比音乐播放器的旋转<br>核心思想:每走1s，改变分针的角度;实质：利用定时器setInterval获取当前时间Date对象时分秒针的转动角度，改变转动样式<br><img src="/images/js30/2.png" alt="效果"><br>【html】最大块clock–含整个表clock-face–含时,分，秒针<br>【css】圆盘指针属性<br>【js】1.获html节点<br>2.定时器setInterval每隔1s=1000ms进行一次处理(获取当前时间，更改对应角度，注意加90°–起始位置,获取到的html节点来改变样式transform：rotate())</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 核心:动态改时间旋转角度</span><br><span class="line">// 1.获取三个指针的HTML</span><br><span class="line">const secHand = document.querySelector(<span class="string">'.second-hand'</span>);</span><br><span class="line">const minHand = document.querySelector(<span class="string">'.min-hand'</span>);</span><br><span class="line">const hourHand = document.querySelector(<span class="string">'.hour-hand'</span>);</span><br><span class="line">//定时器+Data获取时间,定时器间隔ms</span><br><span class="line">var num=setInterval(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  // 编写setDate函数,获取当前时分秒，计算相应角度</span><br><span class="line">  //获取当前时间</span><br><span class="line">  const data = new Date();</span><br><span class="line">  const second =data.getSeconds();//获取秒</span><br><span class="line">  //计算角度：90°--0秒，60秒走360度</span><br><span class="line">  const secondDeg = 90+(second/60)*360;</span><br><span class="line">  const min =data.getMinutes();</span><br><span class="line">  const minDeg = 90 +(min/60)*360;</span><br><span class="line">  const hour = data.getHours();</span><br><span class="line">  //加入分钟所占的时间，是时针缓慢移动</span><br><span class="line">  // 时针在一小时内缓慢的移动到下一个时间点。所以可以利用上分钟，计算每一分钟对时针的角度影响，将加到时针角度上即可</span><br><span class="line">  const hourDeg = 90 + (hour / 12) * 360 + (min / 12 / 60) * 360;</span><br><span class="line">  // const hourDeg =( 90+ (hour/12)*360);也可</span><br><span class="line"></span><br><span class="line">  // 动态将角度值赋值给 HTML 元素的 style 中的 transform 属性</span><br><span class="line">  secHand.style.transform=`rotate(<span class="variable">$&#123;secondDeg&#125;</span>deg)`;</span><br><span class="line">  minHand.style.transform = `rotate(<span class="variable">$&#123; minDeg &#125;</span>deg)`;</span><br><span class="line">  hourHand.style.transform = `rotate(<span class="variable">$&#123; hourDeg &#125;</span>deg)`;</span><br><span class="line">        //在控制台打印当前时间及对应的角度</span><br><span class="line">        console.log(`<span class="variable">$&#123;hour&#125;</span>:<span class="variable">$&#123;min&#125;</span>:<span class="variable">$&#123;second&#125;</span>-角度<span class="variable">$&#123;hourDeg&#125;</span>:<span class="variable">$&#123;minDeg&#125;</span>:<span class="variable">$&#123;secondDeg&#125;</span>`);</span><br><span class="line">&#125;,1000); </span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>【难点】css中的样式设定：指针加阴影box-shadow<br>1.贝塞尔曲线过渡<a href="https://www.cnblogs.com/tenfly/p/11559845.html" target="_blank" rel="noopener">transition-timing-function: cubic-bezier(0.9, 0.54, 0.26, 1.68);</a><br>2.转换–调整曲线轴点–旋转元素的基点位置[transform-origin]<br>3.过渡–时钟指针跳动时的过渡效果<br>transition: all 3s;//复合属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition: property duration timing-function delay;</span><br></pre></td></tr></table></figure><p>这里js主要改的是transform:rotate()</p><h3 id="3-js控制css"><a href="#3-js控制css" class="headerlink" title="3.js控制css"></a><a href="https://github.com/ximoxiyu/JavaScript30/tree/master/03%20-%20CSS%20Variables" target="_blank" rel="noopener">3.js控制css</a></h3><p>【核心】触发事件mousemove或input的change,改变css的样式<br><img src="/images/js30/3.png" alt="效果"><br>【html】标题,<a href="https://blog.csdn.net/zhouziyu2011/article/details/58594447?utm_source=blogxgwz0" target="_blank" rel="noopener">label+input</a>构成控制栏(),图片img</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//通过为&lt;input&gt;设置id属性，在&lt;lable&gt;标签中设置<span class="keyword">for</span>=id来让说明文本和对应的&lt;input&gt;关联起来。</span><br><span class="line"> &lt;label <span class="keyword">for</span>=<span class="string">"spacing"</span>&gt;Spacing:&lt;/label&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"range"</span> name=<span class="string">"spacing"</span> min=<span class="string">"10"</span> max=<span class="string">"200"</span> value=<span class="string">"10"</span> data-sizing=<span class="string">"px"</span>&gt;</span><br></pre></td></tr></table></figure><p>【css】</p><ol><li>声明全局（:root）对应html标签的 CSS 变量  –变量名</li><li>使用全局变量(要改变的元素hh类与img内使用) var(–变量名)<br>【js】</li><li>两种事件均会改变样式，故将改变样式封装成函数，触发事件调用此函数即可</li><li>多个input标签选定节点，forEach遍历;</li><li>addEventListener事件监听，一个事件可执行多个函数</li><li>change事件-input值变动，触发;mousemove-鼠标移动<br>【难点】样式改变<br>1)获取参数值后缀—数据属性 dataset<br>2)获取参数名与参数值<br>3)对应css变量赋值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        //   用 JS和 CSS3 实现拖动滑块时，实时调整图片的内边距、模糊度、背景颜色，同时标题中 JS 两字的颜色也随图片背景颜色而变化。</span><br><span class="line"></span><br><span class="line">        // 编写处理更新操作的方法</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">handleUpdate</span></span>() &#123;</span><br><span class="line">            // 获取参数值后缀</span><br><span class="line">            const suffix = this.dataset.sizing || <span class="string">''</span>; // 根据 data-sizing 获取参数的后缀</span><br><span class="line">            // 获取参数名（blur、spacing、color）</span><br><span class="line">            document.documentElement.style.setProperty(`--<span class="variable">$&#123;this.name&#125;</span>`, this.value + suffix); // 设置页面 CSS 变量的值</span><br><span class="line">            // 获取参数值（12px、<span class="comment">#efefef）并赋值给相应的CSS变量--文档根元素</span></span><br><span class="line">            document.getElementById(this.name).innerText = this.value + suffix; // 页面参数实时显示</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 获取页面中 input 元素</span><br><span class="line">        const inputs = document.querySelectorAll(<span class="string">'.controls input'</span>);</span><br><span class="line">        // 给每个 input 添加监听事件(两种)，使其在值变动，触发更新操作</span><br><span class="line">        inputs.forEach(input =&gt; input.addEventListener(<span class="string">'mousemove'</span>, handleUpdate));//可以加多个函数,不能加多个事件</span><br><span class="line">        inputs.forEach( input =&gt; input.addEventListener(<span class="string">'change'</span>, handleUpdate));</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="处理参数值"><a href="#处理参数值" class="headerlink" title="处理参数值"></a>处理参数值</h4>只需要加上 data- 前缀，可以随便添加和命名,利用dataset来访问，dataset 的值是 DOMStringMap 的一个实例化对象，其中包含之前所设定的自定义属性的“名-值”对。<br>input标签中声明data-sizing=”px”,在js中用dataset.sizing来获取后缀名</li></ol><h4 id="js处理css样式"><a href="#js处理css样式" class="headerlink" title="js处理css样式"></a>js处理css样式</h4><p>获取文档根元素document.documentElement，改变css的全局变量</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;01-打鼓&quot;&gt;&lt;a href=&quot;#01-打鼓&quot; class=&quot;headerlink&quot; title=&quot;01 打鼓&quot;&gt;&lt;/a&gt;01 &lt;a href=&quot;https://github.com/ximoxiyu/JavaScript30/tree/master/01%20-%20JavaScript%20Drum%20Kit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;打鼓&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;【基本思路】&lt;br&gt;触发键盘按键ASDFGHJKL,进行audio播放与样式的改变,结束后触发transitionend事件去除样式;&lt;br&gt;【html】一大块div(keys)内含9小块div(key)，每小块div有自身的键码data-key与音频sound;&lt;br&gt;每个按键码对应一个audio标签，进行指定音频【注：音频地址为本地sounds文件夹】&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="js30" scheme="http://yoursite.com/tags/js30/"/>
    
  </entry>
  
  <entry>
    <title>ajax与fetch学习</title>
    <link href="http://yoursite.com/2020/03/21/ajax%E4%B8%8Efetch/"/>
    <id>http://yoursite.com/2020/03/21/ajax%E4%B8%8Efetch/</id>
    <published>2020-03-21T05:04:07.000Z</published>
    <updated>2020-03-21T05:53:47.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax学习"><a href="#Ajax学习" class="headerlink" title="Ajax学习"></a>Ajax学习</h2><p>在控制台查看网页发送的网络请求,Network-XHR–Response</p><ol><li>定义:Asynchronous JavaScript and XML—异步 JavaScript 和 XML</li><li>用途:浏览器赋予js主动发起网络请求</li><li>XML数据传输格式(早期ajax使用)，现被JSON取代</li><li>实现方式：提供XMLHttpRequest构造函数，两部分XML+HttpRequest(指http协议中的请求报文);XMLHttpRequest函数让JS主动发起http请求，从而与服务器之间通过http协议来相互通信<a id="more"></a></li><li>1)一般将上述构造函数，new一个新对象xhr，即<br> var xhr =new XMLHttpRequest();</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">xhr对象的三个属性:</span><br><span class="line">1).readyState：表示当前 XHR 对象请求/响应过程的当前活动阶段,四个属性值(0,1,2,3,4)   <span class="keyword">if</span>(xhr.readyState ===4)</span><br><span class="line">0 UNSENT (初始状态，未打开)</span><br><span class="line">此时xhr对象被成功构造，open()方法还未被调用</span><br><span class="line"></span><br><span class="line">1 OPENED (已打开，未发送)</span><br><span class="line">open() 方法已被成功调用，send()方法还未被调用。注意：只有xhr处于OPENED状态，才能调用xhr.setRequestHeader()</span><br><span class="line">和xhr.send()，否则会报错</span><br><span class="line"></span><br><span class="line">2 HEADERS_RECEIVED (已获取响应头)</span><br><span class="line">send()方法已经被调用, 响应头和响应状态已经返回</span><br><span class="line"></span><br><span class="line">3 LOADING (正在下载响应体)</span><br><span class="line">响应体(response entity body)正在下载中，此状态下通过xhr.response可能已经有了响应数据</span><br><span class="line"></span><br><span class="line">4 DONE (整个数据传输过程结束)</span><br><span class="line">整个数据传输过程结束，不管本次请求是成功还是失败</span><br><span class="line">2).status：服务器响应报文的[状态码](http://blog.poetries.top/FE-Interview-Questions/base/<span class="comment">#_6-http%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E5%90%AB%E4%B9%89)if(xhr.status ===200)</span></span><br><span class="line">3).responseText：保存了服务器返回的数据  console.log(xhr.responseText);</span><br></pre></td></tr></table></figure><p>   2)open方法打开xhr对象–启动请求未发送<br>      xhr.open(‘GET’,url,true)//三个参数：<a href="http://blog.poetries.top/FE-Interview-Questions/base/#_3-http%E7%9A%84%E5%87%A0%E7%A7%8D%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E7%94%A8%E9%80%94" target="_blank" rel="noopener">http请求方法</a>，http请求地址，第三个不常用<br>    3)send方法–发送http请求<br>    xhr.send(null)//一个参数–发送给server的信息(请求报文中的消息体)，字符串类型xhr.send(‘hello’);或null<br>    4)onreadystatechange属性–获取服务器数据<br>    在readyState属性变为4(请求完成)的时候访问responseText属性(存放服务器的响应数据)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 设定XHR对象的onreadystatechange属性</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  console.log(<span class="string">'调用send函数后的XHR对象：'</span>, xhr.readyState);</span><br><span class="line"></span><br><span class="line">  // 浏览器接收完成server数据,下面用了xhr对象的三个属性</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === 4) &#123;</span><br><span class="line">    // 响应状态码有效,2XX：成功状态码,304自从上次请求后，请求的网页未修改过</span><br><span class="line">    <span class="keyword">if</span> (200 &lt;= xhr.status &lt; 300 || xhr.status === 304) &#123;</span><br><span class="line">      console.log(<span class="string">'接收到服务器数据：'</span>, xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个XHR对象</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">console.log(<span class="string">'刚刚创建的XHR对象：'</span>, xhr.readyState);</span><br><span class="line"></span><br><span class="line">// 打开XHR对象，</span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'http://yapi.demo.qunar.com/mock/63071/helloworld'</span>);</span><br><span class="line">console.log(<span class="string">'调用open函数后的XHR对象：'</span>, xhr.readyState);</span><br><span class="line"></span><br><span class="line">// 设定XHR对象的onreadystatechange属性</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  console.log(<span class="string">'调用send函数后的XHR对象：'</span>, xhr.readyState);</span><br><span class="line"></span><br><span class="line">  // 浏览器接收完成服务器数据</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === 4) &#123;</span><br><span class="line">    // 响应状态码有效</span><br><span class="line">    <span class="keyword">if</span> (200 &lt;= xhr.status &lt; 300 || xhr.status === 304) &#123;</span><br><span class="line">      console.log(<span class="string">'接收到服务器数据：'</span>, xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 发送http请求</span><br><span class="line">xhr.send(<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">刚刚创建的XHR对象：0</span><br><span class="line">调用open函数后的XHR对象：1</span><br><span class="line">调用send函数后的XHR对象：2</span><br><span class="line">调用send函数后的XHR对象：3</span><br><span class="line">调用send函数后的XHR对象：4</span><br><span class="line">接收到服务器数据：Hello World!</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ajax学习&quot;&gt;&lt;a href=&quot;#Ajax学习&quot; class=&quot;headerlink&quot; title=&quot;Ajax学习&quot;&gt;&lt;/a&gt;Ajax学习&lt;/h2&gt;&lt;p&gt;在控制台查看网页发送的网络请求,Network-XHR–Response&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义:Asynchronous JavaScript and XML—异步 JavaScript 和 XML&lt;/li&gt;
&lt;li&gt;用途:浏览器赋予js主动发起网络请求&lt;/li&gt;
&lt;li&gt;XML数据传输格式(早期ajax使用)，现被JSON取代&lt;/li&gt;
&lt;li&gt;实现方式：提供XMLHttpRequest构造函数，两部分XML+HttpRequest(指http协议中的请求报文);XMLHttpRequest函数让JS主动发起http请求，从而与服务器之间通过http协议来相互通信
    
    </summary>
    
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
      <category term="http协议" scheme="http://yoursite.com/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>面试题03</title>
    <link href="http://yoursite.com/2020/03/21/%E9%9D%A2%E8%AF%95%E9%A2%9803/"/>
    <id>http://yoursite.com/2020/03/21/%E9%9D%A2%E8%AF%95%E9%A2%9803/</id>
    <published>2020-03-21T05:03:21.000Z</published>
    <updated>2020-03-26T08:48:19.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js基础"><a href="#js基础" class="headerlink" title="js基础"></a><a href="http://blog.poetries.top/FE-Interview-Questions/base/#%E4%B8%89%E3%80%81javascript" target="_blank" rel="noopener">js基础</a></h2><p> 1)<a href="http://blog.poetries.top/FE-Interview-Questions/base/#_1-%E9%97%AD%E5%8C%85" target="_blank" rel="noopener">闭包</a><br> 读取函数内部变量的函数;创建闭包：函数内嵌套函数,内部函数可访问外变量与参数,变量与参数不会被垃圾机制回收<br> 理解：避免全局污染，但增加内存，使用不当会增加内存泄漏；在js中函数即闭包<br>2)作用域链<br>作用域:变量与函数的可访问范围,作用域链保证有序<br>3)<a href="https://www.jianshu.com/p/dee9f8b14771" target="_blank" rel="noopener">JS原型,原型链及特点</a><br>实例的构造函数属性指向构造函数<br>对象分普通对象和函数对象,每个对象都有 <strong>proto</strong> 属性，但只有函数对象才有 prototype 属性,原型对象就是 Person.prototype<br>原型对象（Person.prototype）是 构造函数（Person）的一个实例。<br>JS对象通过引用传递<br>原型:对象内部属性–prototype(原型)<br>原型链:访问一个对象属性,若没有,去原型里找,此原型又有自身原型,递推下去，一直检索到 Object 内建对象<br>关系：instance.constructor.prototype = instance.<strong>proto</strong><br>4)事件代理(事件委托):事件绑定到父元素–DOM元素事件冒泡<br>可节省内存,减少事件注册,提高性能<br>5)JS继承:构造继承,原型继承及两者混用(常用)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//构造函数首字母大写</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Parent</span></span>()&#123;</span><br><span class="line">    this.name =<span class="string">'wang'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Child</span></span>()&#123;</span><br><span class="line">    this.age =<span class="string">'22'</span>;</span><br><span class="line">&#125;</span><br><span class="line">//通过原型,继承Parent属性</span><br><span class="line">Child.prototype =new Parent();</span><br><span class="line">//创建demo实例</span><br><span class="line">var demo = new Child();</span><br><span class="line">alert(demo.age);</span><br><span class="line">alert(demo.name);//得到被继承的属性</span><br></pre></td></tr></table></figure><p>6)this对象的理解:<br>四种绑定:默认,显性,隐形,new<br>遇到this,函数还原foo.call();<br>this-函数直接调用者/new的对象/触发事件的对象/全局对象Window<br>7)事件模型<br>事件发生三阶段:捕获(父子)-目标-冒泡(子父)<br>DOM事件流:支持捕获型事件与冒泡型事件<br>阻止冒泡stopPropagation();阻止捕获:阻止事件的默认行为preventDefault()方法<br>8)new操作符用途:创建空对象,this变量引用此对象,属性方法被加入且继承函数原型<br>9)Ajax原理:前后端中间加入中间层(Ajax引擎),由XMLHttpRequest对象向服务器发送异步请求获数据,js操作DOM更新页面.【异步操作】<br>此过程只涉及JS，XMLHttpRequest与DOM<br>优缺点：异步操作，减少带宽占用，不易调试，不安全<br>【同步与异步区别】<br>10)跨域：<br>浏览器的同源策略(Sop)：”协议+域名+端口”安全协议</p><p>多用：nginx代理跨域<br>11)模块化开发：ES6 module<br>12)异步加载JS:async?<br>13)内存泄漏：应用程序不再需要占用内存，内存仍存在<br>闭包使用不当;setTimeout第一个参数为字符串;控制台日志，循环(两对象彼此引用，保留)<br>14)JSON与XML：数据交换格式，多用JSON<br>基于JS的子集，易读写，占带宽小<br>JSON字符串转换为JSON对象:var obj = JSON.parse(str);<br>JSON对象转换为JSON字符串:var last=JSON.stringify(obj);<br>15)webpack:模块打包工具<br>16)AMD与Commonjs<br>Commonjs–Node.js采用的服务器模块规范，同步;module.exports属性赋值–模块对象<br>AMD-非同步加载模块,返回对象做模块对象<br>es6模块 CommonJS、AMD、CMD<br>17)web安全及防护<br>18)设计模式：工厂模式，构造函数模式<br>21)JS方法定义对象<br>对象字面量 var obj ={}<br>构造函数  var obj = new Object();<br>Object.create()  var obj =Object.create(Object.prototype)<br>22)兼容性问题【重】<br>全局的*{margin:0;padding:0;}<br>23)Promise对象<br>四种状态：pending初始状态，fulfilled成功操作，rejected失败，settled<br>Promise对象：延迟与异步计算<br>【异步编程实现】<br>回调函数(简单，不利维护);事件监听(事件驱动型);发布、订阅(类似事件监听);Promise对象(then方法，链式);Generator函数;async函数<br>24)js优势：防变量全局污染，window对象做局部变量，链式调用节约代码<br>25)vue与react<br>26)Node应用场景<br>29)web开发会话跟踪：cookie,session,url重写，ip地址，隐藏input<br>30)基本数据类型(5)：Number Boolean String Null Undefined<br>31)js内置对象：object父对象;数据封装类对象(Array Object Boolean Number String);其他对象(function Math Date RegExp(正则) Error Arguments)<br>32)js基本规范：<br>33)JS几种类型值：栈-基本数据类型，大小固定，占据空间小;堆-引用数据类型(数组，对象，函数)<br>区别：存储位置不同,引用数据类型仔栈中存指针，指针指向堆中实体的起始地址<br>寻找引用值：在栈中找地址，从堆中获实体<br>35)eval:字符串解析为js代码，避免使用，耗内存<br>36)null与undefined区别：变量是否声明赋值，参与数学运算;验证时用===<br>38)use strict:严格运行模式，编码更规范;<br>严格模式限制：变量先声明后使用，函数参数不能有同名属性，不能用with,禁止this指向全局对象<br>40)js延迟加载：defer(并行加载js,顺序执行)和async(并行加载js,下载完成执行)、动态创建DOM方式（用得最多）、按需异步载入js</p><p>42)<a href="https://www.cnblogs.com/web-wjg/p/7240985.html" target="_blank" rel="noopener">渐进增强与优雅降级</a><br>目的：关注不同浏览器下的不同体验<br>低-构建页面，高-增加效果—从低版本到高版本<br>先构建完整功能，低版本兼容—从高版本到低版本<br>45)attribute和property的区别<br>dom元素在html/js的属性;html标准属性：同步，自动更新;自定义属性：不同步<br>46)ES6理解【重点】:模板字符串,箭头函数，Promise对象，let与const，块级作用域，引入module模板;Object.creat()写class<br>58)原生js:数据类型，运算，对象，函数，继承，闭包，作用域，原型链，事件，正则，JSON,Ajax,DOM,BOM,内存泄漏，跨域，异步装载，模板引擎，前端MVC,路由，模块化，Canvas，ECMAScript<br>48)<a href="https://blog.csdn.net/jean_1221/article/details/51694008" target="_blank" rel="noopener">面向对象&amp;面向过程</a><br>面向对象:功能划分，对象，类，继承，封装；易维护，易扩展，缩短开发周期，重用性<br>面向过程：步骤划分<br>js是面向对象<br>50)web标准、可用性、可访问性<br>51)JS判断一个数组<br>52)let与var  块中封闭作用域<br>53)map与forEach:遍历循环<br>map返回新数组，return<br>forEach(遍历数组内容，数组索引，当前遍历数组)<br>54)函数式编程：编程范式，如何编写程序的方法<br>特性：闭包与高阶函数，惰性计算，递归，函数–只用表达式<br>55)箭头函数【重点】：内部无this对象，不用new,不作构造函数<br>59)JS动画与CSS3动画区别<br>复杂-js动画;css3-小交互动效<br>60)js数组和对象遍历方式：for in/for/forEach<br>61)gulp:基于流的代码构建工具，易使用，构建快速，学习<br>62)Vue双向绑定数据：<br>64)let var const<br>65)数组乱序<br>66)渲染数据不卡界面(代码)<br>67)获取页面checkbox<br>68)添加，移除，移动，复制，创建，寻找节点<br>69)正则表达式RegExp<br>70)js的callee与caller<br>71)window.onload与$(document).ready<br>window.onload()加载完毕才执行<br>$(document).ready()不必加载完就执行<br>72)addEventListener()依次执行和attachEvent()倒序执行的区别<br>74)数组去重：set;for嵌套for，用splice;indexOf;filter<br>75)页面节点拖拽(代码) js实现持续动画<br>76)js的全局函数与变量<br>80)项目优化:减少HTTP请求数，减少DNS查询，使用CDN,避免重定向，图片懒加载等<br>81)浏览器缓存：强、协商缓存<br>82)WebSocket<br>83)Electron理解：套了Chrome的nodejs<br>84)深浅拷贝<br>85)防抖、节流<br>86)变量提升：<br>87)单线程：仅一个线程，只做一个事，避免DOM渲染冲突<br>103)完成一个Dialog组件<br>105)ajax,axios,fetch</p><hr><h3 id="Webpack相关"><a href="#Webpack相关" class="headerlink" title="Webpack相关"></a>Webpack相关</h3><ol><li>打包体积优化<br>代码压缩插件Uglifyjsplugin;服务器启用gzip压缩;剥离css文件，单独打包</li><li>打包效率:热更新;配置devtool;选合适loader;优化构建时的搜索路径 指明需要构建目录及不需要构建目录</li><li>Loader:node模块，输出一个函数(代码)</li></ol><h3 id="编程题-剑指offer-递归思想"><a href="#编程题-剑指offer-递归思想" class="headerlink" title="编程题(剑指offer)-递归思想"></a>编程题(剑指offer)-递归思想</h3><p>2)如何判断一个对象是否为数组?<br>3)冒泡排序,快速排序(递归)<br>5)求一个字符串的字节长度:判ASCII(有问题)<br>6)bind的用法<br>与call和apply相同，区别是call和apply是立即调用函数，而bind是返回了一个函数，需要调用的时候再执行。<br>7)函数clone,while比for效率高–递归算法<br>8)闭包<br>12)12 写一段JS程序提取URL中的各个GET参数<br>14)闭包  快捷作用域<br>15)回文字符串<br>16)数组扁平化处理:递归</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li>负载均衡</li><li>CDN：内容分发网络</li><li>内存泄漏</li><li>babel原理</li><li>js自定义事件</li><li>前后端路由差别</li></ol><p><a href="http://blog.poetries.top/FE-Interview-Questions/base/#%E4%B8%89%E3%80%81javascript" target="_blank" rel="noopener">题库</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      前端基础js,105道
    
    </summary>
    
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="前端面试" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
      <category term="基础篇" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>面试题02</title>
    <link href="http://yoursite.com/2020/03/21/%E9%9D%A2%E8%AF%95%E9%A2%9802/"/>
    <id>http://yoursite.com/2020/03/21/%E9%9D%A2%E8%AF%95%E9%A2%9802/</id>
    <published>2020-03-21T05:03:06.000Z</published>
    <updated>2020-03-24T10:17:09.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a><a href="http://blog.poetries.top/FE-Interview-Questions/base/#_19-%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E7%9A%84%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E5%A5%87%E6%95%B0%E8%BF%98%E6%98%AF%E5%81%B6%E6%95%B0%E7%9A%84%E5%AD%97%E4%BD%93%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E5%91%A2%EF%BC%9F" target="_blank" rel="noopener">CSS部分</a></h2><ol><li><a href="">css sprite是什么及优缺点？</a><a href="https://www.cnblogs.com/evenyao/p/9262371.html">https://www.cnblogs.com/evenyao/p/9262371.html</a><br>css精灵或雪碧图,网页图片的应用处理—多个小图拼成一个大图(背景图像)<br>background-position 背景图像background-image的起始位置(左上角)。使用雪碧图前确定每个小图标的位置 background-position:x y<a id="more"></a></li><li>display: none;与visibility: hidden;的区别<br>均是元素不可见;display: none元素从渲染树消失，不占空间，非继承性，读屏器不读取</li><li><a href="http://www.divcss5.com/rumen/r431.shtml" target="_blank" rel="noopener">link与@import的区别</a><br>均是引入css样式;<br>1)语法结构<br>link是html标签,而@import url(CSS文件路径地址);在style标签下使用<br>2)link最大限度支持并行下载;@import是串行下载，出现FOUC,且必须在样式规则前，可在css文件中引用其他文件<br>3)link优于@import</li><li><a href="https://www.cnblogs.com/gxx129/p/10859117.html" target="_blank" rel="noopener">FOUC-文档样式短暂失效</a><br>Flash Of Unstyled Content无样式内容闪烁，在IE下由@import导入css文件引起;IE先加载文档DOM树，再导入外部css,两者时间中页面无样式<br>解决：使用link标签</li><li><a href="https://blog.csdn.net/sinat_36422236/article/details/88763187" target="_blank" rel="noopener">BFC的创建与用途</a><br>block formatting context块格式化上下文<br>用途：1)使BFC内部浮动元素不乱跑，2)与浮动元素产生边界<br>正常的文档流中，块级元素是按照从上自下，内联元素从左到右的顺序排列，给float或绝对定位absolute，元素脱离正常文档流<br>举例子而不要纠结定义<br>BFC规范：决定元素对其内容定位及其他元素的关系与相互作用</li><li>display、float、position的关系：绝对定位、浮动、根元素都需要调整display</li><li>清除浮动的几种方式,最佳：父级div定义伪类:after和zoom</li><li>初始化CSS样式：浏览器的兼容问题，但会影响SEO</li><li>css3新特性：圆角 border-radius, 文字特效text-shadow,线性渐变,旋转transform,新增伪类</li><li>display有哪些值7【重点】 </li><li>标准的CSS的盒子模型：W3C盒子模型content+padiing+border+margin;低版本IE的盒模型中的content包含border与padding</li><li>css优先级算法：就近；!important &gt; id &gt; class &gt; tag; !important 比 内联优先级高</li><li>浮动和清除浮动</li><li>position的值， relative(原位置)和absolute定位原点(不为static的父元素)</li><li>display:inline-block 什么时候不会显示间隙？移除空格，使用margin负值，使用font-size:0,【参考代码04间隙解决】</li><li>PNG\GIF\JPG的区别及如何选【记住】</li><li>行内元素float:left后是否变为块级元素？像inline-block,但默认效果不是100%,可以设置padding-top和padding-bottom或者width、height</li><li><a href="https://blog.csdn.net/jian_xi/article/details/79346477" target="_blank" rel="noopener">在网页中使用偶数字体</a>：更容易与web设计的其他部分构成比例关系;低版本浏览器ie6会将奇数字体强制转换成偶数字体</li><li>::before 和 :after中双冒号–伪元素和单冒号–CSS3伪类<br>伪类用于选择DOM树之外的信息，或是不能用简单选择器进行表示的信息。伪元素为DOM树没有定义的虚拟元素<br><a href="https://segmentfault.com/a/1190000019122105" target="_blank" rel="noopener">伪类与伪元素</a>伪类-状态-：  伪元素-真有元素-::</li><li>手写动画的最小时间间隔：多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60*1000ms ＝ 16.7ms</li><li>CSS合并方法：css工具(sass/compass)将css合并成一个css文件</li><li>CSS不同选择器的权重(CSS层叠的规则)<a href="https://www.cnblogs.com/piaoyi1997/p/12530163.html" target="_blank" rel="noopener">内联样式表(1000)&gt;id选择符(100)&gt;class选择符(10)&gt;标签选择符(1)</a></li><li>改变页面布局的属性：display,padding,margin,postion,top,left,right,width,height,float</li><li>CSS性能优化:尽量用缩写、避免用滤镜、合理使用选择器</li><li>css3简单动画：旋转<br>3个属性：transition,transform,animation</li><li>base64原理及优缺点：Base64是用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个字符来表示二进制数据的方法;优点：可加密，减少HTTP请求;缺点：消耗CPU来编解码;base适用于小图片，体积约为原图3/4</li><li>常见CSS布局：流体布局,圣杯布局,双飞翼布局</li><li><a href="https://blog.csdn.net/ly2983068126/article/details/77737292" target="_blank" rel="noopener">stylus/sass/less区别</a><br>为三款不同的css预处理器</li><li><a href="https://www.jianshu.com/p/288963680642" target="_blank" rel="noopener">postcss</a></li><li>自定义字体的使用场景:宣传、品牌等固定文案;字体图标</li><li>美化CheckBox<br>Checkbox 对象代表一个 HTML 表单中的 一个选择框。3种方法</li><li><a href="https://zhuanlan.zhihu.com/p/25220324" target="_blank" rel="noopener">自适应布局</a></li><li>用css写一个简单的幻灯片效果-代码37</li><li>外边距重叠margin-collapse,相邻外边距结合成一个单独外边距<br>重叠结果：同正或同负，取绝对值最大;一正一负取两者和</li><li>透明效果rgba()仅作用于元素颜色及背景色，子元素不继承<br>opacity作用于元素及元素内容</li><li>css文字在垂直line-height与水平方向重叠letter-spacing</li><li>垂直居中一个浮动元素:已知宽高-父绝对，上左为50%，margin-top与margin-left为-1/2宽高;<br>未知宽高-父相对，margin:auto,上下左右均为0</li><li>px固定与em不固定区别：长度单位，em可继承，1em=16px,浏览器默认字体高16px</li><li>css的content属性：应用于before与after伪元素上，用于插入生成内容，应用：利用伪类清除浮动</li><li>水平居中(5种)，垂直居中5种【重点】</li><li>CSS实现硬件加速：创建独立的复合图层，让GPU来渲染这个图层，从而提高性能，css属性transform、opacity、filter</li><li><a href="https://www.cnblogs.com/soyxiaobi/p/9963019.html" target="_blank" rel="noopener">重绘与重排</a></li><li>css3的animation动画效果</li><li>左边宽度固定，右边自适应(代码)</li><li>垂直水平居中(5种–博客)</li><li>小于12px的字体–利用display:inline;//设成行内块元素<br>transform: scale(0.7);//缩放有宽高的元素<br><a href="http://blog.poetries.top/FE-Interview-Questions/base/#%E4%BA%8C%E3%80%81css%E9%83%A8%E5%88%86" target="_blank" rel="noopener">题库</a></li></ol><hr><h3 id="补充-css3学习"><a href="#补充-css3学习" class="headerlink" title="补充-css3学习"></a><a href="https://www.runoob.com/css3/css3-tutorial.html" target="_blank" rel="noopener">补充-css3学习</a></h3><p>CSS 用于控制网页的样式和布局,CSS3 是最新的 CSS 标准。模块化发展<br>【重点】选择器，盒模型，背景和边框，文字特效，2D/3D转换，动画动态盒子<br>1)border-radius使用(3种) 顺时针简写<br>   border-radius: 25px;<br>            /* background-color: blue; <em>/<br>            /</em> border: 1px solid red; <em>/<br>            /</em> background-image: url(bg.jpg) ; */<br>2)background背景 简写<br>background-image(可放多个背景图片,)/background-size/background-size/background-position/ background-repeat<br>background-origin:背景图片位置，三个值<br>  background-clip: content-box;默认：没有背景剪裁 border-box<br>3)渐变，减少下载的时间和宽带的使用;线性(下上左右对角)、径向渐变(中心，形状)<br>对角线性渐变background-image:linear-gradient(to top left,#e66465, #9198e5,blue);<br>透明度：创建逐渐变淡效果rgba() 函数来定义颜色结点，rgba() 函数中的最后一个参数可以是从 0 到 1 的值，它定义了颜色的透明度：0 表示完全透明，1 表示完全不透明。<br>径向渐变：默认椭圆background-image: radial-gradient(red, yellow, green);<br>4)文本效果：<br>text-shadow文字阴影：水平，垂直，阴影距离，颜色text-shadow: 5px 5px 5px #FF0000;<br>【做卡片】盒子阴影box-shadow: 10px 10px 5px #888888;//盒子距离，第三个属性值表模糊度<br>word-break:keep-all单词拆分、break-all换行;<br>5)CSS3字体：@font-face<br>6)2D/3D转换：移动、缩放、转动、拉长或拉伸，效果某元素改变大小，位置，形状<br>transform:translate()/rotate()/scale()/skew(倾斜角度)/matrix()<br>7)过渡transition–样式转变:添加效果样式，持续时间(样式转变更平滑)transition: width 2s;<br>简写属性：transition-property应用过渡的CSS名称<br>transition-duration默认为0,transition-timing-function,transition-delay何时开始<br>8)动画@keyframes 规则是创建动画,指定两个CSS3的动画属性(名称，时长)绑定一个选择器<br>动画是使元素从一种样式逐渐变化为另一种样式的效果。百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0%(开始) 和 100%(结束)且当动画完成时，会变回初始的样式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">   //animation所有动画属性的简写，除了animation-play-state 属性--动画运行或暂停。</span><br><span class="line">   animation: myfirst 5s;</span><br><span class="line">   &#125;</span><br><span class="line">@keyframes myfirst</span><br><span class="line">&#123;</span><br><span class="line">from &#123;background:red;&#125;</span><br><span class="line">to &#123;background:yellow;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9)CSS3 多列column–报纸<br>(分割数count、列间隙gap,列边框/厚度/颜色 rule-style/width/color–简写column-rule)</p><p>10)用户界面：调整元素尺寸，框尺寸和外边框resize,box-sizing,outline-offset<br>11)css图片img+border-radius实现圆角、椭圆形，缩略图<br>响应式图片–自动适配各种尺寸的屏幕<br>文字图片居中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">position: absolute;</span><br><span class="line"> top: 50%;</span><br><span class="line"> width: 100%;</span><br><span class="line"> text-align: center;</span><br></pre></td></tr></table></figure><p>图片滤镜 img{filter:grayscale(100%)}<br>图片模态框(css+js)<br>12)<a href="https://www.runoob.com/css3/css3-buttons.html" target="_blank" rel="noopener">css按钮</a><br>13)css3分页：页面导航<br>14)框大小：CSS3 box-sizing 属性可以设置 width 和 height 属性中包含了 padding(内边距) 和 border(边框)。使用：box-sizing: border-box;<br>15)【重点：弹性盒子flex box】容器+子元素(一行，从左到右)<br>flex-direction 属性指定了弹性子元素在父容器中的位置。<br>弹性容器上：内容对齐（justify-content）属性-水平；align-item—垂直;flex-wrap 属性–子元素换行<br>【注】1.设置”margin”值为”auto”值，自动获取弹性容器中剩余的空间<br>居中：display:flex及margin:auto<br>2.flex 属性用于指定弹性子元素如何分配空间<br>flex: auto | initial | none | inherit |  [ flex-grow ] || [ flex-shrink ] || [ flex-basis ]<br>16)<a href="https://www.runoob.com/css3/css3-mediaqueries-ex.html" target="_blank" rel="noopener">多媒体查询@media</a></p>]]></content>
    
    <summary type="html">
    
      基础篇-css部分
    
    </summary>
    
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="前端面试" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
      <category term="基础篇" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>面试题01</title>
    <link href="http://yoursite.com/2020/03/21/%E9%9D%A2%E8%AF%95%E9%A2%9801/"/>
    <id>http://yoursite.com/2020/03/21/%E9%9D%A2%E8%AF%95%E9%A2%9801/</id>
    <published>2020-03-21T05:02:53.000Z</published>
    <updated>2020-03-22T03:05:58.663Z</updated>
    
    <content type="html"><![CDATA[<p>真的快哭死了，敲了三个小时的内容，一个保存–否，回到解放前！被自己蠢哭<br>所以我决定<a href="https://www.jb51.net/article/151649.htm" target="_blank" rel="noopener">在VScode中使用git</a></p><h2 id="基础篇-HTML-HTTP，Web综合问题"><a href="#基础篇-HTML-HTTP，Web综合问题" class="headerlink" title="[基础篇]HTML,HTTP，Web综合问题"></a>[基础篇]HTML,HTTP，Web综合问题</h2><ol><li>前端需要注意哪些SEO<br>SEO：搜索引擎优化<br>1)合理title&gt;description(内容高度概括)&gt;keyworks(关键字)<br>不同页面的title,description不同<br>2)语义化html代码，重要内容的html往前写，不用js输出<br>3)少用frame<br>4)非装饰性img加alt属性<br>5)提高网站的速度<a id="more"></a></li><li>HTTP的请求方法：GET POST PUT HEAD DELETE</li><li>【重点】 从浏览器地址栏输入url到显示页面的步骤</li><li>网站性能优化<br>js与css多用外链,尾与头部，减少DOM的数量与调用，较小cookie大小</li><li>HTTP状态码<br>1xx–信息状态码<br>2xx–成功状态码，200-正常返回<br>3xx–重定向,304上次请求后页面未修改<br>4xx–客户端错误，403禁止访问，404没找到资源<br>5xx–服务器错误，500服务器端错误</li><li>语义化理解<br>正确的标签做正确的事，利于SEO</li><li>浏览器内核–渲染引擎</li><li><a href="https://blog.csdn.net/weixin_41796631/article/details/89313941" target="_blank" rel="noopener">.appcache</a><br>AppCache就是对app内存缓存的方案，具体表现为当请求某个文件时不是从网络获取该文件，而是从本地获取。<br>优势：离线浏览,速度,减少服务器负载</li><li>【重点】cookies，sessionStorage 和 localStorage 的区别？存储地址,大小,寿命</li><li>iframe缺点：阻碍主页面onload事件;不利于SEO;影响页面并行加载;解决-js动态给iframe添加src属性</li><li>web标准与W3C标准<br>标签闭合，标签大小写，不乱嵌套，css与js外链</li><li>Doctype作用? &lt;!DOCTYPE&gt; 声明位于文档中的最前面，定义文档规范;不存在或错误使用时导致文档以混杂模式呈现<br>HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为</li><li>行内元素：span img input a select<br>块元素：div h1-h6 p ul li dd<br>空元素：input img hr br link meta</li><li>全局属性：class title id style</li><li><a href="https://blog.csdn.net/yaodebian/article/details/84778425" target="_blank" rel="noopener">如何在页面上实现一个圆形的可点击区域？</a><br>svg–矢量图<br>border-radius=50%(css3)<br>纯js–有代码<ol start="22"><li>网页验证码(输入证书)<br>区分用户是否为人;防止黑客</li><li>渲染优化【理解】</li><li>你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?<br>IE: trident内核<br>Firefox：gecko内核<br>Safari:webkit内核<br>Opera:以前是presto内核，Opera现已改用Google - Chrome的Blink内核<br>Chrome:Blink(基于webkit，Google与Opera Software共同开发) </li></ol></li><li>div+css的布局较table布局有什么优点？<br>html与css分离，更改方便;加载速度快，结构化清晰，页面简洁，SEO友好</li><li>a：img的alt与title有何异同？b：strong与em的异同？</li><li>为什么利用多个域名来存储网站资源会更有效？<br>CDN缓存更方便<br>突破浏览器并发限制<br>节约cookie带宽<br>节约主域名的连接数，优化页面响应速度<br>防止不必要的安全问题 </li><li>src与href的区别<br>src替换当前元素，href当前文档和引用资源之间确立联系；<br>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接<br>link标签中href，并行下载资源对当前文档的处理</li><li>网页制作会用到的图片格式<br>png-8、png-24、jpeg、gif、svg,新技术：Webp(加快图片加载速度)与Apng(动态图标准)</li><li>在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？dns缓存，cdn缓存，浏览器缓存，服务器缓存</li><li>优化页面加载<br>图片懒加载等</li><li>常见排序算法的时间复杂度,空间复杂度【重点】</li><li>HTTP request报文结构是怎样的【掌握】</li><li>HTTP response报文结构是怎样的【掌握】</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;真的快哭死了，敲了三个小时的内容，一个保存–否，回到解放前！被自己蠢哭&lt;br&gt;所以我决定&lt;a href=&quot;https://www.jb51.net/article/151649.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在VScode中使用git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;基础篇-HTML-HTTP，Web综合问题&quot;&gt;&lt;a href=&quot;#基础篇-HTML-HTTP，Web综合问题&quot; class=&quot;headerlink&quot; title=&quot;[基础篇]HTML,HTTP，Web综合问题&quot;&gt;&lt;/a&gt;[基础篇]HTML,HTTP，Web综合问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;前端需要注意哪些SEO&lt;br&gt;SEO：搜索引擎优化&lt;br&gt;1)合理title&amp;gt;description(内容高度概括)&amp;gt;keyworks(关键字)&lt;br&gt;不同页面的title,description不同&lt;br&gt;2)语义化html代码，重要内容的html往前写，不用js输出&lt;br&gt;3)少用frame&lt;br&gt;4)非装饰性img加alt属性&lt;br&gt;5)提高网站的速度
    
    </summary>
    
    
    
      <category term="前端面试" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>this的指向</title>
    <link href="http://yoursite.com/2020/03/20/this%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/03/20/this%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-20T10:40:51.000Z</published>
    <updated>2020-03-21T04:07:13.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this的四种绑定格式"><a href="#this的四种绑定格式" class="headerlink" title="this的四种绑定格式"></a>this的四种绑定格式</h2><p>优先级：new&gt;显性&gt;隐形&gt;默认绑定</p><p> 1.默认绑定<br>输出10，使用全局变量var a=10,此时this绑定window</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>()&#123;</span><br><span class="line">            var a=1;</span><br><span class="line">            console.log(this.a);</span><br><span class="line">        &#125;</span><br><span class="line">        var a=10;</span><br><span class="line">        foo();</span><br><span class="line">补充：转换为foo.call(undefined),此时this为window</span><br></pre></td></tr></table></figure><a id="more"></a><p>2.隐形绑定<br>输出100，直接可维护性差，使用obj中的变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>()&#123;</span><br><span class="line">         console.log(this.a)</span><br><span class="line">     &#125;</span><br><span class="line">     // 创建对象</span><br><span class="line">     var obj=&#123;</span><br><span class="line">         a:100,</span><br><span class="line">         foo</span><br><span class="line">     &#125;</span><br><span class="line">     // 调用全局变量，未定义，打印undefined</span><br><span class="line">     foo() //转换为foo.call(undefined)</span><br><span class="line">     //调用obj中变量，输出100</span><br><span class="line">     obj.foo() //转换为obj.foo.call(obj)</span><br></pre></td></tr></table></figure><p>3.显性绑定<br>输出1000,两个方法call(对象,参数,参数…)及apply(对象，数组-绑定函数的参数列表)及bind</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>()&#123;</span><br><span class="line">          console.log(this.a)</span><br><span class="line">      &#125;</span><br><span class="line">      var obj=&#123;</span><br><span class="line">          a:1000,</span><br><span class="line">      &#125;</span><br><span class="line">      foo.call(obj,0) //已经使用了call形式，故此时this为obj</span><br></pre></td></tr></table></figure><p>4.new绑定<br>创建新对象，将其proto属性指向原函数的prototype属性（对象），新对象绑定到此函数的this,返回新对象<br>this访问临时对象！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>()&#123;</span><br><span class="line">    this.a=1;</span><br><span class="line">     console.log(this)</span><br><span class="line">   //   当返回对象类型，新对象会丢失</span><br><span class="line">   &#125;</span><br><span class="line">   // 默认绑定,打印Window</span><br><span class="line">   foo();</span><br><span class="line">   // 创建新对象，打印foo</span><br><span class="line">   var obj=new foo();</span><br><span class="line">   // 打印1</span><br><span class="line">   console.log(obj.a)</span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/23987456?refer=study-fe" target="_blank" rel="noopener">补充：new的使用</a></p><h3 id="补充-new–语法糖"><a href="#补充-new–语法糖" class="headerlink" title="补充-new–语法糖"></a>补充-new–语法糖</h3><p>实质：省略几行代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 士兵(ID)&#123;</span><br><span class="line">  var 临时对象 = &#123;&#125;//可省略-创建临时对象</span><br><span class="line"></span><br><span class="line">  临时对象.__proto__ = 士兵.原型 //可省略-绑定原型</span><br><span class="line"></span><br><span class="line">  临时对象.ID = ID</span><br><span class="line">  临时对象.生命值 = 42</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">return</span> 临时对象 //可省略<span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line"> 士兵.原型 = &#123;  //统一</span><br><span class="line">  兵种:<span class="string">"美国大兵"</span>,</span><br><span class="line">  攻击力:5,</span><br><span class="line">  行走:<span class="function"><span class="title">function</span></span>()&#123; /*走俩步的代码*/&#125;，</span><br><span class="line">  奔跑:<span class="function"><span class="title">function</span></span>()&#123; /*狂奔的代码*/  &#125;,</span><br><span class="line">  死亡:<span class="function"><span class="title">function</span></span>()&#123; /*Go die*/    &#125;,</span><br><span class="line">  攻击:<span class="function"><span class="title">function</span></span>()&#123; /*糊他熊脸*/   &#125;,</span><br><span class="line">  防御:<span class="function"><span class="title">function</span></span>()&#123; /*护脸*/       &#125;</span><br></pre></td></tr></table></figure><p>使用new和this </p><ul><li>不用创建临时对象，因为 new 会帮你做（你使用「this」就可以访问到临时对象）</li><li>不用绑定原型，因为 new 会帮你做（new 为了知道原型在哪，所以指定原型的名字为 prototype）；</li><li>不用 return 临时对象，因为 new 会帮你做；</li><li>不要给原型想名字,因为 new 指定名字为 prototype<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 士兵(ID)&#123;</span><br><span class="line">  this.ID = ID</span><br><span class="line">  this.生命值 = 42</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">士兵.prototype = &#123;  //已改为prototype</span><br><span class="line">  兵种:<span class="string">"美国大兵"</span>,</span><br><span class="line">  攻击力:5,</span><br><span class="line">  行走:<span class="function"><span class="title">function</span></span>()&#123; /*走俩步的代码*/&#125;,</span><br><span class="line">  奔跑:<span class="function"><span class="title">function</span></span>()&#123; /*狂奔的代码*/  &#125;,</span><br><span class="line">  死亡:<span class="function"><span class="title">function</span></span>()&#123; /*Go die*/    &#125;,</span><br><span class="line">  攻击:<span class="function"><span class="title">function</span></span>()&#123; /*糊他熊脸*/   &#125;,</span><br><span class="line">  防御:<span class="function"><span class="title">function</span></span>()&#123; /*护脸*/       &#125;</span><br><span class="line">&#125;</span><br><span class="line">注：使用时 var obj= new 士兵(ID)</span><br></pre></td></tr></table></figure><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var x=10;</span><br><span class="line">   var obj=&#123;</span><br><span class="line">       x:20,</span><br><span class="line">       <span class="function"><span class="title">f</span></span>()&#123;</span><br><span class="line">           console.log(this.x); </span><br><span class="line">           var foo =<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">               console.log(this.x);</span><br><span class="line">           &#125;</span><br><span class="line">      //打印10--全局(向外一层)</span><br><span class="line">           foo() //等价于foo.call(undefined)--window--全局10</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   //打印20--对象</span><br><span class="line">   obj.f()  //等价于obj.f.call(obj)--obj--20</span><br></pre></td></tr></table></figure></li></ul><p>面试题2—还是不理解？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> foo(num)&#123;</span><br><span class="line">     this.a=num;</span><br><span class="line">     <span class="built_in">return</span> this</span><br><span class="line"> &#125;</span><br><span class="line"> var a=foo(1);//等价于a=foo.call(undifined,1)---指向全局window</span><br><span class="line"> var b=foo(10);</span><br><span class="line"> console.log(a.a);</span><br><span class="line"> console.log(b.a)</span><br></pre></td></tr></table></figure><p>拓展：</p><ol><li>打印结果 undefined 和10</li><li>若将a换成c，此时打印10和10,<br>c和b均指向window,全局变量10重新覆盖</li></ol><p>【分析】：执行var a=foo(1)后，a=1,但执行var b=foo(100);后，将100传给a，及此时a.a为100.100错误表示</p><ol start="3"><li><p>更改a,b语句顺序</p><p> var b=foo(1);<br> var a=foo(10);<br>此时打印window和window</p></li><li><p>补充<br><a href="https://www.bilibili.com/video/av86982631" target="_blank" rel="noopener">this绑定</a></p></li></ol><h2 id="利用代码转换理解this"><a href="#利用代码转换理解this" class="headerlink" title="利用代码转换理解this"></a>利用代码转换理解this</h2><p>this指向的是执行环境，执行环境不同指向不同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var bar = obj.foo</span><br><span class="line">obj.foo() // 打印出的 this 是 obj</span><br><span class="line">bar() // 打印出的 this 是 window</span><br><span class="line">说明：obj.foo() 等价于obj.foo().call(obj)</span><br><span class="line">bar()等价于bar.call(undefined)---window</span><br></pre></td></tr></table></figure><p>函数的三种调用方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func(p1,p2)</span><br><span class="line">obj.child.method(p1,p2)//语法糖</span><br><span class="line">func.call(context,p1,p2)//正常调用方式</span><br></pre></td></tr></table></figure><p>两种语法糖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func(p1, p2) 等价于func.call(undefined, p1, p2)</span><br><span class="line">obj.child.method(p1, p2) 等价于obj.child.method.call(obj.child, p1, p2)</span><br></pre></td></tr></table></figure><p>注：func.call(context,p1,p2)//正常调用方式<br>this即为代码的context，call此函数时传递的context</p><ol><li>func(p1, p2) 中的 this<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func</span></span>()&#123;</span><br><span class="line">  console.log(this)</span><br><span class="line">&#125;</span><br><span class="line">func()//等价于func.call(undefined),简写为func.call()</span><br><span class="line">说明：理论上是输出undefined，实际上是window</span><br><span class="line">原因：浏览器规则--若context=null/undefined,则使用window对象</span><br><span class="line">理解：func.call(undefined) // this 为window对象</span><br><span class="line">func.call(obj) //  this 为 obj 对象</span><br></pre></td></tr></table></figure></li><li>obj.child.method(p1, p2) 的 this<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.foo() //等价为obj.foo.call(obj),故this为obj</span><br></pre></td></tr></table></figure></li><li>数组【】<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn</span></span> ()&#123; console.log(this) &#125;</span><br><span class="line">var arr = [fn, 1]</span><br><span class="line">arr[0]() //假想为arr.0()等价为arr.0.call(arr)</span><br></pre></td></tr></table></figure></li><li>箭头函数<br>箭头函数里面的 this 等价于箭头函数外面的 this</li><li>Event Handler 中的 this<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//事件监听</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span> ,<span class="keyword">function</span> <span class="function"><span class="title">handler</span></span>()&#123;</span><br><span class="line">  console.log(this) // 请问这里的 this 是什么--handler代码</span><br><span class="line">  //等价于-事件触发handler.call(event.currentTarget, event) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>jQuery Event Handler 中的 this<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ul</span>.on(<span class="string">'click'</span>, <span class="string">'li'</span> , <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  console.log(this)</span><br><span class="line">&#125;)//this关键字指向的是当前正在执行事件的元素</span><br></pre></td></tr></table></figure></li><li>确定this总结：1)this是call函数时的第一个参数,遇见函数转化为call形式<br>2)看文档 3)console.log(this)</li></ol>]]></content>
    
    <summary type="html">
    
      了解this的指向问题
    
    </summary>
    
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="前端面试" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>css垂直居中的5种方法</title>
    <link href="http://yoursite.com/2020/03/08/flex%E5%B8%83%E5%B1%80%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/03/08/flex%E5%B8%83%E5%B1%80%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-03-08T02:57:01.000Z</published>
    <updated>2020-03-21T04:57:46.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="父子关系-五种常见垂直居中方式-两个块-视频"><a href="#父子关系-五种常见垂直居中方式-两个块-视频" class="headerlink" title="父子关系 五种常见垂直居中方式(两个块)视频"></a>父子关系 五种常见垂直居中方式(两个块)<a href="https://www.bilibili.com/video/av84100855" target="_blank" rel="noopener">视频</a></h2><p>【前提】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//html样式</span><br><span class="line">   &lt;div id=<span class="string">"box-container"</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">"box1"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><ol><li>父相对,子绝对,上下左右为0，外边距auto<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#box-container &#123;</span></span><br><span class="line">       width: 300px;</span><br><span class="line">       height: 200px;</span><br><span class="line">       background: blueviolet;</span><br><span class="line">       position: relative;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">#box1 &#123;</span></span><br><span class="line">       width: 100px;</span><br><span class="line">       height: 100px;</span><br><span class="line">       background: orangered;</span><br><span class="line">       position: absolute;</span><br><span class="line">       margin: auto;</span><br><span class="line">       top: 0;</span><br><span class="line">       bottom: 0;</span><br><span class="line">       left: 0;</span><br><span class="line">       right: 0;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>父相对子绝对，transform<br>translate()函数是css3的新特性.在不知道自身宽高的情况下，可以利用它来进行水平垂直居中.由自身位置为中心调整<br>当使用：top: 50%;left: 50%;， 是以左上角为原点，故不处于中心位置<br>translate(-50%,-50%) 作用是，往上（x轴）,左（y轴）移动自身长宽的 50%，以使其居于中心位置。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#box-container &#123;</span></span><br><span class="line">       width: 300px;</span><br><span class="line">       height: 200px;</span><br><span class="line">       background: blueviolet;</span><br><span class="line">       position: relative;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">#box1 &#123;</span></span><br><span class="line">       width: 100px;</span><br><span class="line">       height: 100px;</span><br><span class="line">       background: orangered;</span><br><span class="line">       position: absolute;</span><br><span class="line">       top: 50%;</span><br><span class="line">       left: 50%;</span><br><span class="line">   transform: translate(-50%,-50%);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>父dispaly:table 子dispaly:table-cell<br>在子元素不确定宽高和数量使用<br>table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#box-container &#123;</span></span><br><span class="line">       width: 300px;</span><br><span class="line">       /* height: 200px; */</span><br><span class="line">       /* 必须设置padding值，此时父元素的高=2*padding+子元素的height */</span><br><span class="line">       padding: 100px;</span><br><span class="line">       background: blueviolet;</span><br><span class="line">       display: table;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">#box1 &#123;</span></span><br><span class="line">       width: 100px;</span><br><span class="line">       height: 100px;</span><br><span class="line">       background: orangered;</span><br><span class="line">       display:table-cell;</span><br><span class="line">       vertical-align: center;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>flex + flex-direction<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#box-container &#123;</span></span><br><span class="line">       width: 300px;</span><br><span class="line">       height: 200px;</span><br><span class="line">       background: blueviolet;</span><br><span class="line">       display: flex;</span><br><span class="line">       justify-content: center;</span><br><span class="line">       /* 垂直方向 */</span><br><span class="line">       flex-direction: column;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">#box1 &#123;</span></span><br><span class="line">       width: 100px;</span><br><span class="line">       height: 100px;</span><br><span class="line">       background: orangered;</span><br><span class="line">       align-self: center;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>flex布局(最佳)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#box-container &#123;</span></span><br><span class="line">       width: 300px;</span><br><span class="line">       height: 200px;</span><br><span class="line">       background: blueviolet;</span><br><span class="line">       display: flex;</span><br><span class="line">       justify-content: center;</span><br><span class="line">       align-items: center;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">#box1 &#123;</span></span><br><span class="line">       width: 100px;</span><br><span class="line">       height: 100px;</span><br><span class="line">       background: orangered;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">补充-flex布局语法篇</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">一些说明：传统：盒状模型display+postion+<span class="built_in">float</span>属性</span><br><span class="line">2009：flex布局-弹性盒</span><br><span class="line">设为flex布局后，子元素的<span class="built_in">float</span>，clear和vertical-align属性会失效</span><br><span class="line">父--(6个属性)</span><br><span class="line">• flex-direction,其中row是水平排列</span><br><span class="line">• flex-wrap</span><br><span class="line">• flex-flow 等价与上两条语句</span><br><span class="line">• justify-content 水平对齐</span><br><span class="line">• align-items 垂直对齐</span><br><span class="line">• align-content</span><br><span class="line">子--(6个属性，常用align-self,可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。)</span><br></pre></td></tr></table></figure><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">flex实例篇</a></li></ol>]]></content>
    
    <summary type="html">
    
      flex的布局方式及常见五种垂直居中方式
    
    </summary>
    
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="布局" scheme="http://yoursite.com/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>聊天机器人作业分析</title>
    <link href="http://yoursite.com/2020/03/07/%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%A4%A7%E4%BD%9C%E4%B8%9A%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/03/07/%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%A4%A7%E4%BD%9C%E4%B8%9A%E5%88%86%E6%9E%90/</id>
    <published>2020-03-07T02:02:08.000Z</published>
    <updated>2020-03-07T03:46:53.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="框架分析html"><a href="#框架分析html" class="headerlink" title="框架分析html"></a>框架分析html</h2><p>主体分三块：标题区,列表展示区,输入区<br>应用标签div ul li  button input–建议用textarea代替,可多行输入文字<br>此时注意在li中包含了一层div标签,内写标签内容</p><a id="more"></a><h2 id="css布局与样式美化"><a href="#css布局与样式美化" class="headerlink" title="css布局与样式美化"></a>css布局与样式美化</h2><p>1.初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">        /* 设定下全部元素的 padding 和 margin，方便布局 */</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        //令浏览器呈现出带有指定宽度和高度的框，并把边框和内边距放入框中。</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>2.标题：display:flex,其他俩设center</p><p>3.列表内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.message-list__item-chatbot,</span><br><span class="line">      .message-list__item-user &#123;</span><br><span class="line">        /* 相邻两个列表的距离 */</span><br><span class="line">        margin-bottom: 10px;</span><br><span class="line">        display: flex;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>4.输入框</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.input-area textarea &#123;</span><br><span class="line">        /* 去除轮廓属性，一般输入框聚焦，按钮点击，都会有默认的轮廓*/</span><br><span class="line">        outline: none;</span><br><span class="line">        padding: 6px;</span><br><span class="line">        line-height: 20px;</span><br><span class="line">        /* flex-grow 属性定义弹性盒子项（flex item）的拉伸因子。 */</span><br><span class="line">        flex-grow: 1;</span><br><span class="line">        /* 去除边框属性 */</span><br><span class="line">        border: none;</span><br><span class="line">        border-bottom-left-radius: 3px;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">【一些不常见语句】</span><br><span class="line"> /* 设置一个或多个下拉阴影的框 */</span><br><span class="line">        box-shadow: 0px 0px 12px rgba(39, 35, 35, 0.43);</span><br><span class="line"></span><br><span class="line"> /* 默认的列表标签是有样式的，这个属性就是把列表标签的默认样式给去除掉*/</span><br><span class="line">        list-style: none;</span><br><span class="line">        /* overflow 定义当一个元素的内容太大而无法适应 块级格式化上下文 时候该做什么 */</span><br><span class="line">        /* auto:由浏览器定夺，如果内容被修剪，就会显示滚动条 */</span><br><span class="line">        overflow: auto;</span><br><span class="line"></span><br><span class="line"> /* flex-direction 属性指定了内部元素是如何在 flex 容器中布局的，定义了主轴的方向(正方向或反方向)</span><br><span class="line">    row-reverse表现和row相同，但是置换了主轴起点和主轴终点 */</span><br><span class="line">        flex-direction: row-reverse;</span><br><span class="line">        /* justify-content:flex-end也可以实现同样的效果，但只有一个子元素的时候表现一样</span><br><span class="line">    row-reverse不仅会将子元素的位置全部靠向右边，还会将子元素的排列顺序反转*/</span><br><span class="line"></span><br><span class="line">      line-height: 20px;</span><br><span class="line">        /* word-break属性指定了<span class="built_in">break</span>-all怎样在单词内断行。 */</span><br><span class="line">        word-break: <span class="built_in">break</span>-all;</span><br><span class="line">        /* word-wrap属性允许将长单词打断并包装到下一行。 */</span><br><span class="line">        word-wrap: <span class="built_in">break</span>-word;</span><br><span class="line"></span><br><span class="line">     /* cursor属性定义鼠标指针悬浮在元素上方显示的鼠标光标 */</span><br><span class="line">        cursor: pointer;</span><br></pre></td></tr></table></figure><h2 id="js实现机器人"><a href="#js实现机器人" class="headerlink" title="js实现机器人"></a>js实现机器人</h2><p>【主逻辑】输入框输入文本，点击发送，触发onclick事件，执行sendMsg函数<br>sendMsg()为主函数：<br>基本逻辑-1)获取输入值【节点.value】—-var userMsg = inputArea.value;<br>2）判断userMsg是文字还是图片，对应执行函数userSendMsg(userMsg)或sendimage()<br>发完信息后注意内容清空 inputArea.value = ‘’;<br>3）执行通信函数 ajax（方法，地址，服务器发送数据，回调函数cb）,API接口</p><p>1.函数：机器人发消息chatbotSendMsg(msg)与用户发消息userSendMsg(msg)<br>逻辑同：创建li标签，添加类名，在里下创建子节点div，内部赋值msg–传入值，将div添加到li上，将li添加到message-list节点上<br>，知识添加的类名className不同–对应html中的li标签<br>且在最后li.scrollIntoView(false);//滚动条函数<br>2.图片函数：sendimage()发同userSendMsg(msg)，只是将文字改为图片，在div下新增img标签，赋图片地址，img节点添加到div中，即<br>   childElement.innerText = msg;<br>替换为：<br> //由增加消息改为增加图片，创建img节点<br>        var img = document.createElement(‘img’);<br>        img.src = ‘<a href="http://pic.yupoo.com/louhanxin/dc355a13/0a58be64.jpg&#39;" target="_blank" rel="noopener">http://pic.yupoo.com/louhanxin/dc355a13/0a58be64.jpg&#39;</a>;<br>        childElement.appendChild(img);//将img节点添加到div中<br>3.前后端通信函数：ajax(method, url, data, cb)<br>新建对象xhr,执行open方法，执行onreadystatechange属性，cb为回调函数，若条件满足，执行cb(xhr.responseText);否则cb(null);</p><p>【拓展】</p><ul><li>实现发送点击回车按钮，自动发送消息—键盘事件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//实现Enter发送消息并且Ctrl+Enter换行</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">enterPress</span></span>() &#123;</span><br><span class="line">      document.onkeydown = <span class="keyword">function</span>(e) &#123;</span><br><span class="line">      //Ctrl+Enter同时按下时，执行换行</span><br><span class="line">        <span class="keyword">if</span> (e.keyCode == 13 &amp;&amp; e.ctrlKey) &#123;</span><br><span class="line">          // 这里Ctrl+Enter实现换行</span><br><span class="line">          inputArea.value += <span class="string">'\n'</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        //仅Enter键时，发送消息</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.keyCode == 13) &#123;</span><br><span class="line">          // 避免回车键换行</span><br><span class="line">          e.preventDefault();</span><br><span class="line">          sendMsg();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>现在服务端机器人名叫菲菲，在前端显示的时候，实现问机器人的名字的时候，机器人回答叫小二黑<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var chatbotMsg = JSON.parse(res).content.replace(<span class="string">'菲菲'</span>,小二黑);</span><br></pre></td></tr></table></figure></li><li>实现机器人回复的时候自动显示最新消息，也就是消息列表滚动到最底部，页面不被遮挡 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//对话列表自动滚动到最底部</span><br><span class="line">var msgs =msglist.getElmentsByTagName(<span class="string">'li'</span>)</span><br><span class="line">msgs[msgs.length -1].scrollIntoView()</span><br></pre></td></tr></table></figure>Element.scrollIntoView() 方法让当前的元素滚动到浏览器窗口的可视区域内。等同于element.scrollIntoView(true)<br>为true时，顶端与其所在的滚动区可视区域顶端对齐<br>为false时，底端与底端对齐<br><a href="https://www.cnblogs.com/my_captain/p/9233314.html" target="_blank" rel="noopener">Element.scrollIntoView()</a></li></ul>]]></content>
    
    <summary type="html">
    
      js的大作业-制作聊天机器人，记录难点
    
    </summary>
    
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js实现聊天机器人</title>
    <link href="http://yoursite.com/2020/03/06/JS%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2020/03/06/JS%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/</id>
    <published>2020-03-06T09:29:29.000Z</published>
    <updated>2020-03-06T23:08:54.408Z</updated>
    
    <content type="html"><![CDATA[<h3 id="html-css复习"><a href="#html-css复习" class="headerlink" title="html+css复习"></a>html+css复习</h3><p>1.拆解网页：3块–标题区,对话区,输入区<br>html-网页骨架<br>标题区：一个div加内容<br>对话区：一个大div,包含一堆小元素–列表展示<ul><br>输入区：一个输入框加多按钮，输入框需要输入多行文本(可换行)，用textarea<br> <div class="send-message"><br>    <textarea></textarea><br>    <button>发送</button><br>  </div></p><a id="more"></a><p>2.布局+样式美化<br>整体区域：设定全部元素的padding和margin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">初始化</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">标题区：居中</span><br><span class="line">对话区：分左右</span><br><span class="line">.message-list__item-robot,</span><br><span class="line">.message-list__item-user &#123;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.message-list__item-user &#123;</span><br><span class="line">  flex-direction: row-reverse;//以相反顺序，等同于justify-content:flex-end;</span><br><span class="line">&#125;</span><br><span class="line">.send-message textarea &#123;</span><br><span class="line">  flex-grow: 1;//flex-grow的默认值为0，意思是该元素不索取父元素的剩余空间，如果值大于0，表示索取。值越大，索取的越厉害</span><br><span class="line">  //flex-grow、flex-shrink、flex-basis三个属性的作用：</span><br><span class="line">在flex布局中，父元素在不同宽度下，子元素是如何分配父元素空间的。</span><br></pre></td></tr></table></figure><h3 id="机器人的自动回复"><a href="#机器人的自动回复" class="headerlink" title="机器人的自动回复"></a>机器人的自动回复</h3><p>将机器人按功能分：消息列表(机器人消息,自己消息),输入框,发送<br>1.工作流程：输入消息，点击发送，发送用户消息，发送机器人消息<br>点击发送时：监听click事件，得输入框内容<br>发送用户消息：创建一个气泡节点(li),在li中写你要发送的内容，将此节点添加到页面<br>第四步同第三步<br>2.获取输入信息–数组[],数据的集合<br>监听发送按钮的点击事件<br>1)找到输入框<br>2)获得里面的消息,value属性<br>3)alert到屏幕上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var a=document.getElementsByTagName(<span class="string">'textarea'</span>)[0];//获取输入框</span><br><span class="line">var b=document.getElementsByTagName(<span class="string">'button'</span>)[0];//获取按钮</span><br><span class="line"> //事件监听</span><br><span class="line"> b.onclick=<span class="keyword">function</span>(e)&#123;</span><br><span class="line"> var kk= a.value;</span><br><span class="line">  a.innerText=<span class="string">''</span>;</span><br><span class="line">  alert(kk);</span><br><span class="line">&#125;</span><br><span class="line">也可以写成addEventListener格式</span><br><span class="line"> b.addEventListener(<span class="string">'click'</span>, <span class="keyword">function</span>(e) &#123;</span><br><span class="line">    var kk = a.value;</span><br><span class="line">    inputArea.value = <span class="string">''</span></span><br><span class="line">    alert(kk)</span><br><span class="line">  &#125;)</span><br><span class="line">  注：除了id选择器,class与tag选择器每次都是选一堆元素--数组，所以使用时加上索引[0]</span><br></pre></td></tr></table></figure><p>3.发送输入消息(用户发送信息)<br>1)在ul列表中添加子节点li,注意加上类名,获取节点类名属性:className<br>创建一个节点<br>2)给这个节点添加类名<br>3)把这个节点添加到界面上去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var li = document.createElement(<span class="string">'li'</span>);//创建节点</span><br><span class="line">   li.className = <span class="string">'message-list__item message-list__item-user'</span>;//加类名</span><br><span class="line">   var childNode = document.createElement(<span class="string">'div'</span>); //创建div节点，里面用来写内容</span><br><span class="line">   childNode.innerText = userMsg;//添加内容</span><br><span class="line">   li.appendChild(childNode)//添加子节点到li</span><br><span class="line"></span><br><span class="line">   var msgList = document.getElementsByClassName(<span class="string">'message-list'</span>)[0];</span><br><span class="line">   msgList.appendChild(li);//将li节点添加到消息列表！</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>4.获取机器人消息–数组<br>Math.random()是随机函数，可以随机一个0-1之间的数字[0,1)<br>Math.floor()是取整函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var data = [</span><br><span class="line">  <span class="string">'我是小二黑，你好啊'</span>,</span><br><span class="line">  <span class="string">'今天天气不错哎'</span>,</span><br><span class="line">  <span class="string">'手机快没电了，回聊呗'</span>,</span><br><span class="line">  <span class="string">'我去洗澡了，待会聊呗'</span>,</span><br><span class="line">  <span class="string">'惊不惊喜，意不意外，刺不刺激？'</span></span><br><span class="line">]</span><br><span class="line">var randomNumber = Math.floor(Math.random() * 5)</span><br><span class="line">var robotMsg = data[randomNumber]</span><br><span class="line">//console.log(robotMsg)</span><br><span class="line">//显示机器人信息-同发送信息，只是类名不同</span><br><span class="line">var li = document.createElement(<span class="string">'li'</span>);</span><br><span class="line">    li.className = <span class="string">'message-list__item message-list__item-robot'</span></span><br><span class="line">    var childNode = document.createElement(<span class="string">'div'</span>)</span><br><span class="line">    childNode.innerText = robotMsg</span><br><span class="line">    li.appendChild(childNode)</span><br><span class="line"></span><br><span class="line">    var msgList = document.getElementsByClassName(<span class="string">'message-list'</span>)[0];</span><br><span class="line">    msgList.appendChild(li);</span><br></pre></td></tr></table></figure><p>5.函数优化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="前后端通信"><a href="#前后端通信" class="headerlink" title="前后端通信"></a>前后端通信</h3><h4 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h4><p>http（HyperText Transfer Protocol）协议，中文名称超文本传输协议<br>协议:共同制定的规则–语言<br>协议定义了传输信息的格式，信息所表示的具体的含义<br>1.前端给后端发送的信息叫做请求报文，HTTP request<br>2.后端回复前端的信息叫做响应报文，HTTP response<br>http协议最主要的内容就是定义了请求报文和响应报文的格式以及各个字段的含义<br>请求报文：请求行，首部字段，消息体<br>其中请求行:请求方法 请求地址 协议版本,前两种比较重要<br>请求方法：<br>1.GET<br>2.POST<br>3.PUT<br>4.DELETE<br>消息体和首部字段之间通过一个空行分隔开来<br>3.响应报文<br>状态行也是由三个字段通过空格分隔构成的，依次是：协议版本、状态码、状态码对应的文本描述;前端就是根据状态码来判断本次请求是否成功!</p><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p>Ajax（Asynchronous JavaScript and XML）异步 JavaScript 和 XML<br>Asynchronous异步<br>JavaScript浏览器给予了 Javascript 主动发起网络请求的能力<br>XML（Extensible Markup Language）–可扩展标记语言<br>Ajax是一系列技术的集合<br>2.Ajax具体实现<br>浏览器赋予Javascript主动发送网络请求的能力,赋予途径： XMLHttpRequest构造函数：JS主动发起http请求，从而与服务器之间通过http协议来达到相互通信的目的<br>３.XMLHttpRequest(XML(早期数据格式)+HttpRequest（请求报文）)<br>1)JS发起一个http请求，先new一个XHR对象<br>var xhr = new XMLHttpRequest();</p><p>2)利用open方法”打开”此xhr对象<br>xhr.open(‘GET’,’<a href="http://www.baicn&#39;" target="_blank" rel="noopener">http://www.baicn&#39;</a>)<br>open方法接受三个参数，仅前两个用的多<br>11)method:http请求类型<br>12)url:请求地址<br>13)是否为异步请求–async<br>注：类比请求报文中的字段<br>调用了 open 方法之后并不会真正发送请求，而只是启动一个请求以备发送。</p><p>3)send方法接受将要发送给服务器的信息–请求报文中的消息体<br>打开浏览器的控制台<br>tab切换到Network<br>切换子tab为XHR,查看此网页发送的所有的网络请求<br>再切换到Response tab,服务器返回的响应报文中消息体所包含的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个XHR对象</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">// 打开XHR对象，</span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'http://yapi.demo.qunar.com/mock/63071/helloworld'</span>);</span><br><span class="line">// 发送http请求</span><br><span class="line">xhr.send(<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure><p>4)获取服务器返回的数据<br>xhr对象的三个属性<br>1.responseText：保存了服务器返回的数据<br>2.status：服务器响应报文的状态码<br>3.readyState：表示当前 XHR 对象请求/响应过程的当前活动阶段，这个属性有以下一些取值：(0-4)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个XHR对象</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">console.log(<span class="string">'刚刚创建的XHR对象：'</span>, xhr.readyState);//0</span><br><span class="line">// 打开XHR对象，</span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'http://yapi.demo.qunar.com/mock/63071/helloworld'</span>);</span><br><span class="line">console.log(<span class="string">'调用open函数后的XHR对象：'</span>, xhr.readyState);//1</span><br><span class="line">// 设定XHR对象的onreadystatechange属性</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  console.log(<span class="string">'调用send函数后的XHR对象：'</span>, xhr.readyState);//2,3,4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 发送http请求</span><br><span class="line">xhr.send(<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure><ul><li>其中onreadystatechange属性，给它赋值了一个函数，决定我们能获取到服务器数据</li><li>每当XHR对象的readyState属性发生改变时，如果onreadystatechange属性是一个函数，那么浏览器都会运行这个函数</li><li>每当XHR对象的readyState属性发生改变时，如果onreadystatechange属性是一个函数，那么浏览器都会运行这个函数</li><li>服务器的响应数据又是存放于xhr对象的responseText属性<br>即：在readyState属性变为4的时候访问responseText属性，就能获取到服务器的响应数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个XHR对象</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">console.log(<span class="string">'刚刚创建的XHR对象：'</span>, xhr.readyState);</span><br><span class="line"></span><br><span class="line">// 打开XHR对象，</span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'http://yapi.demo.qunar.com/mock/63071/helloworld'</span>);</span><br><span class="line">console.log(<span class="string">'调用open函数后的XHR对象：'</span>, xhr.readyState);</span><br><span class="line"></span><br><span class="line">// 设定XHR对象的onreadystatechange属性</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  console.log(<span class="string">'调用send函数后的XHR对象：'</span>, xhr.readyState);</span><br><span class="line"></span><br><span class="line">  // 浏览器接收完成服务器数据(新增)</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === 4) &#123;</span><br><span class="line">    // 判断响应报文状态码的有效性</span><br><span class="line">    <span class="keyword">if</span> (200 &lt;= xhr.status &lt; 300 || xhr.status === 304) &#123;</span><br><span class="line">      console.log(<span class="string">'接收到服务器数据：'</span>, xhr.responseText);//获取响应数据</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 发送http请求</span><br><span class="line">xhr.send(<span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line">【输出】</span><br><span class="line">刚刚创建的XHR对象：0</span><br><span class="line">调用open函数后的XHR对象：1</span><br><span class="line">调用send函数后的XHR对象：2</span><br><span class="line">调用send函数后的XHR对象：3</span><br><span class="line">调用send函数后的XHR对象：4</span><br><span class="line">接收到服务器数据：Hello World!</span><br></pre></td></tr></table></figure><h3 id="利用Ajax改造机器人"><a href="#利用Ajax改造机器人" class="headerlink" title="利用Ajax改造机器人"></a>利用Ajax改造机器人</h3><p>你给服务端说了hello(通过xhr.send(‘hello’)),服务端则给你回复了hello world</p><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><p>1.最常见的是get请求，其次是post请求<br>2.get请求直接通过URL来给服务端发消息，也就是消息被一起拼接在URL里;post请求，约定通过content来传递消息，也就是XHR.send()括号里的内容<br>3.get请求(中文：获得)一般都是获取数据的请求,我需要一本xx书，服务端把这本书拿来给你，把xx拼在url里就好了;post（中文：发布）一般是，告诉服务端，我需要给你一本书，让你放在你的书架上,放在url中不安全，故选择放在请求的body里发送（也就是xhr.send()括号里的东西）<br>4.xhr.open(‘GET’, ‘<a href="http://wang.norma.shop:8080/api.php?key=free&amp;appid=0&amp;msg=&#39;+msg);表示，给服务端发送了一条get请求，传输了一个msg，msg的值是hello" target="_blank" rel="noopener">http://wang.norma.shop:8080/api.php?key=free&amp;appid=0&amp;msg=&#39;+msg);表示，给服务端发送了一条get请求，传输了一个msg，msg的值是hello</a><br>5.具体什么请求，看接口文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">var msg = <span class="string">'hello'</span></span><br><span class="line">// 创建一个XHR对象</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">console.log(<span class="string">'刚刚创建的XHR对象：'</span>, xhr.readyState);</span><br><span class="line"></span><br><span class="line">// 打开XHR对象，</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'http://wang.norma.shop:8080/api.php?key=free&amp;appid=0&amp;msg='</span>+msg);</span><br><span class="line">console.log(<span class="string">'调用open函数后的XHR对象：'</span>, xhr.readyState);</span><br><span class="line"></span><br><span class="line">// 设定XHR对象的onreadystatechange属性</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  console.log(<span class="string">'调用send函数后的XHR对象：'</span>, xhr.readyState);</span><br><span class="line"></span><br><span class="line">  // 浏览器接收完成服务器数据</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === 4) &#123;</span><br><span class="line">    // 响应状态码有效</span><br><span class="line">    <span class="keyword">if</span> (200 &lt;= xhr.status &lt; 300 || xhr.status === 304) &#123;</span><br><span class="line">      console.log(<span class="string">'接收到服务器数据：'</span>, xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 发送http请求</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>机器人-get请求</p><pre><code class="bash">//封装成函数使用<span class="keyword">function</span> ajax(method, url, data, cb) {  // 默认请求方式为 GET  method = method || <span class="string">"GET"</span>;  data = data || null;  <span class="keyword">if</span> (!url) {    throw new Error(<span class="string">"必须指定 url 参数"</span>);  }//之前内容  var xhr = new XMLHttpRequest();  xhr.open(method, url);  xhr.onreadystatechange = <span class="function"><span class="title">function</span></span>() {    // readyState 为 4 时表示已经全部接收到响应数据    <span class="keyword">if</span> (xhr.readyState === 4) {      // Http 状态码大于等于 200 小于 300，或者等于 304，表示请求成功      <span class="keyword">if</span> ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status === 304) {        cb(xhr.responseText);      } <span class="keyword">else</span> {        cb(null);      }    }  };  xhr.send(data);}//使用时var msg = <span class="string">'hello'</span>ajax(<span class="string">'GET'</span>, <span class="string">'http://wang.norma.shop:8080/api.php?key=free&amp;appid=0&amp;msg='</span>+msg, null,<span class="keyword">function</span> success(response){console.log(response)})【结果】{<span class="string">"result"</span>:0,<span class="string">"content"</span>:<span class="string">"{face:14}Hi~"</span>}{<span class="string">"result"</span>:0,<span class="string">"content"</span>:<span class="string">"Nice to meet you"</span>}</code></pre><p>ajax这个函数可以传入一个函数(此函数即为回调函数)作为参数，在ajax函数执行后，调用这个函数给你消息</p><h4 id="大作业"><a href="#大作业" class="headerlink" title="大作业"></a>大作业</h4><p>a.实现基础的聊天机器人(其实复制粘贴上面的代码就足够了)+1分</p><p>b.实现发送点击回车按钮，自动发送消息+1分</p><p>c.现在服务端机器人名叫菲菲，在前端显示的时候，实现问机器人的名字的时候，机器人回答叫小二黑 +1分</p><p>d.实现机器人回复的时候自动显示最新消息，也就是消息列表滚动到最底部，页面不被遮挡 +1分</p>]]></content>
    
    <summary type="html">
    
      客服，制作一个淘宝客服机器人
    
    </summary>
    
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js学习01</title>
    <link href="http://yoursite.com/2020/03/06/js%E5%AD%A6%E4%B9%A001/"/>
    <id>http://yoursite.com/2020/03/06/js%E5%AD%A6%E4%B9%A001/</id>
    <published>2020-03-06T05:30:31.000Z</published>
    <updated>2020-03-06T09:27:12.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h2><p>1.首字母必须是字母、下划线（_）或者美元符号（$），不可为数字！！！<br>2.其他字母可以是下划线（_）、美元符号（$）、字母或者数字<br>3.一般采用驼峰法：第一个字母小写，其余有意义的单词首字母大写<br>4.变量名是区分大小写的，不能是关键字或保留字(例如var这种在js中有意义的词语)<br>【var代表定义一个变量，也就是拿出一个标签为name的盒子】已有变量无需定义</p><h3 id="数据类型及操作"><a href="#数据类型及操作" class="headerlink" title="数据类型及操作"></a>数据类型及操作</h3><p>基本：number(浮点)，string,Boolean<br>特殊：null,undefined(未定义)<br>利用typeof(内容)l检测数据类型，注typeof(null)–object</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var name = <span class="string">'小明'</span></span><br><span class="line">var age = 17</span><br><span class="line">var isMarried = <span class="literal">false</span></span><br><span class="line">var firstName</span><br><span class="line">var lastName = null</span><br><span class="line">console.log(typeof(name))----string</span><br><span class="line">console.log(typeof(age))---number</span><br><span class="line">console.log(typeof(isMarried))--boolean</span><br><span class="line">console.log(typeof(firstName))---undefined</span><br><span class="line">console.log(typeof(lastName))--object</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="字符串拼接-，数学运算"><a href="#字符串拼接-，数学运算" class="headerlink" title="字符串拼接(+)，数学运算"></a>字符串拼接(+)，数学运算</h3><p>注：/不是整除，%取余数</p><ul><li>数学运算时，数据会转换为数据类型，如true–1,null–0</li><li>1-‘1’=0,但是1+’1’=11;此时+做字符串连接符<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = 1</span><br><span class="line">var b = 2</span><br><span class="line">console.log(a+b)--3</span><br><span class="line">console.log(a-b)---1</span><br><span class="line">console.log(a*b)---2</span><br><span class="line">console.log(a/b)---0.5</span><br><span class="line">console.log(a%b)---1</span><br></pre></td></tr></table></figure></li><li>NaN和任何数字参与运算时，结果均为NaN，undefined参与数字运算时，转换为NAN</li><li>NaN之间也是不相等的，也就是说NaN!==NaN,判断NAN,Number.isNaN(),返回T/F<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = 1</span><br><span class="line">var b = <span class="string">'一个奇怪的字符串'</span></span><br><span class="line">console.log(a * b)---NAN</span><br><span class="line">console.log(Number.isNaN(a*b))--<span class="literal">true</span></span><br><span class="line">console.log(Number.isNaN(a))--<span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2></li></ul><p>条件判断：if-else,if-else if-else,循环for,while的使用<br>1)等号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 两个等号,先转数据类型再判断</span><br><span class="line">console.log(1 == <span class="string">'1'</span>);--<span class="literal">true</span></span><br><span class="line">// 三个等号，直接判断</span><br><span class="line">console.log(1 === <span class="string">'1'</span>);--<span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><h3 id="函数与对象"><a href="#函数与对象" class="headerlink" title="函数与对象"></a>函数与对象</h3><p>1.定义 function 函数名(参数){}<br>返回值：关键字return,多个return时只返回第一个，即遇到return,就返回并退出函数，所以return后面的代码均不会执行;不写return时，函数返回值为undefined<br>2.对象(属性和方法)：每个对象都有自己的属性 var cat={},其中{}为对象！<br>类似css的属性：属性值，但css是;结尾，对象是,结尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var cat = &#123;</span><br><span class="line">  name: <span class="string">'糖糖'</span>,</span><br><span class="line">  age: 0.8,</span><br><span class="line">  color: <span class="string">'whiteAndBlack'</span></span><br><span class="line">&#125;</span><br><span class="line">//获取对象属性值的两种方法</span><br><span class="line">console.log(cat.age) //常用</span><br><span class="line">console.log(cat[<span class="string">'age'</span>]) //有自身优势,[]内的属性名可变，如obj.style[name],其中的name可以为height,width,color等，用于做函数的参数很好</span><br></pre></td></tr></table></figure><p>2)方法：对象中的函数，省略关键字function<br>cat.year//调用属性<br>cat.say()//调用方法</p><p>3.构造函数：生成各种对象的函数,即函数内部为一个对象，外面套了function 函数名(参数){}<br>目的：利用构造函数生成对象<br>使用：var car1 = new 函数名(参数)<br>其中new为构造函数的关键字，此时的car1为一个对象</p><h3 id="DOM和BOM-重难点"><a href="#DOM和BOM-重难点" class="headerlink" title="DOM和BOM (重难点)"></a>DOM和BOM (重难点)</h3><p>HTML文档树：html为根节点，分head和body节点<br>DOM:Document Object Model文档对象模型<br>document就是dom对象，整个页面的全部信息都在这个对象中，节点一般从此找<br>DOM—文档树对象，通过文档树对象来控制html(增删改查)<br>属性：html+css<br>方法：很多</p><h4 id="节点的操作"><a href="#节点的操作" class="headerlink" title="节点的操作"></a>节点的操作</h4><p>常用的节点操作方法<br>1.创建节点：document.createElement<br>2.添加节点：element.appendChild<br>3.删除节点：element.removeChild<br>4.查找节点：document.getElementById、document.getElementsByClassName、document.querySelector、document.querySelectorAll</p><p>1)改—-找节点，改内容(2步)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = document.getElementById(<span class="string">'div1-1'</span>)</span><br><span class="line">a.innerText = <span class="string">'汪小黑'</span> //innerText属性</span><br></pre></td></tr></table></figure><p>2)删—找子节点，找父节点，删子节点(3步)<br>节点操作依赖父节点(增删子节点)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var childElement = document.getElementById(<span class="string">'div1-2'</span>) //找子节点</span><br><span class="line">var ParentElement = document.getElementById(<span class="string">'div1'</span>) //找父节点</span><br><span class="line">ParentElement.removeChild(childElement) //从父节点中删子节点</span><br></pre></td></tr></table></figure><p>3)增—创建子节点，注创建时，()为html标签名–(3步)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var ParentElement = document.getElementById(<span class="string">'div1'</span>) //找父节点</span><br><span class="line">var childElement = document.createElement(<span class="string">'div'</span>) //创建子节点，是div而不是div1-3,创建标签是标签元素</span><br><span class="line">ParentElement.appendChild(childElement) //从父节点中增加子节点</span><br></pre></td></tr></table></figure><h4 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h4><p>【每个节点】都可以【监听】发生在【自己】身上的【事件】<br>如：点击-按钮：执行自身预设的js代码<br>目的：点击div-1,div块变黄<br>1.找到div1-1<br>2.监听div1-1上的「点击」事件 obj.onclick=function(){}<br>3.写触发【点击】事件之后的逻辑<br>a.找到div1<br>b.改变div1的背景颜色</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">基本思路：获取节点，写事件触发函数</span><br><span class="line">var element = document.getElementById(<span class="string">'div1-1'</span>);//找节点</span><br><span class="line">element.onclick=<span class="keyword">function</span>(e)&#123; //有参数e</span><br><span class="line">var dObj = document.getElementById(<span class="string">'div1'</span>) //找节点</span><br><span class="line">dObj.style.backgroundColor=<span class="string">'yellow'</span></span><br><span class="line">&#125;</span><br><span class="line">注：每个节点的css存储在此节点的style中</span><br><span class="line">e-指event对象，document属性有很多</span><br></pre></td></tr></table></figure><h3 id="BOM操作"><a href="#BOM操作" class="headerlink" title="BOM操作"></a>BOM操作</h3><p>浏览器提供的一个对象，用来操作浏览器<br>BOM（Browser Object Model），即浏览器对象模型<br>核心对象：window,含6大核心模块<br>document：文档对象<br>frames：窗口中所有命名的框架<br>history：当前页面历史记录<br>location：当前页面地址信息<br>navigator：浏览器相关信息<br>screen：用户显示屏幕相关属性<br>【重点】掌握BOM的属性和方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(window.location.href)//打开当前页面地址</span><br><span class="line">// 下面这条语句会打开新页面，关掉就好了</span><br><span class="line">window.open(<span class="string">'http://www.baidu.com'</span>)</span><br></pre></td></tr></table></figure><p>【补充】<br>1.DOM查找节点方法：document.querySelector(), document.getElementById(), document.getElementsByClassName(), document.getElementsByTagName()<br>2.常用节点属性<br> element.style 表示节点的样式<br> element.innerHTML表示节点里的html<br> element.innerText 表示节点里的文本<br>3.关于事件参数e<br> 1)e是事件触发时，浏览器传给事件触发函数的一个参数对象<br> 2)触发一个鼠标点击事件，e里面包括了鼠标的坐标信息（鼠标在屏幕的坐标）<br> 3)触发一个键盘点击事件，e里面包括了键盘的按键信息（键盘按了哪个键）<br> 4.事件<br> 1)js事件的冒泡指的是事件从子元素向父元素「渗透」的过程<br> 2)给一个元素绑定点击事件，有addEventListener和onclick等多种方式<br> 3)onclick只能给元素点击事件绑定一个事件，addEventerListener可以绑定多个</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量的命名&quot;&gt;&lt;a href=&quot;#变量的命名&quot; class=&quot;headerlink&quot; title=&quot;变量的命名&quot;&gt;&lt;/a&gt;变量的命名&lt;/h2&gt;&lt;p&gt;1.首字母必须是字母、下划线（_）或者美元符号（$），不可为数字！！！&lt;br&gt;2.其他字母可以是下划线（_）、美元符号（$）、字母或者数字&lt;br&gt;3.一般采用驼峰法：第一个字母小写，其余有意义的单词首字母大写&lt;br&gt;4.变量名是区分大小写的，不能是关键字或保留字(例如var这种在js中有意义的词语)&lt;br&gt;【var代表定义一个变量，也就是拿出一个标签为name的盒子】已有变量无需定义&lt;/p&gt;
&lt;h3 id=&quot;数据类型及操作&quot;&gt;&lt;a href=&quot;#数据类型及操作&quot; class=&quot;headerlink&quot; title=&quot;数据类型及操作&quot;&gt;&lt;/a&gt;数据类型及操作&lt;/h3&gt;&lt;p&gt;基本：number(浮点)，string,Boolean&lt;br&gt;特殊：null,undefined(未定义)&lt;br&gt;利用typeof(内容)l检测数据类型，注typeof(null)–object&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var name = &lt;span class=&quot;string&quot;&gt;&#39;小明&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var age = 17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var isMarried = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var firstName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var lastName = null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(typeof(name))----string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(typeof(age))---number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(typeof(isMarried))--boolean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(typeof(firstName))---undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(typeof(lastName))--object&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="基础知识" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>html+css总结</title>
    <link href="http://yoursite.com/2020/03/06/html-css%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/03/06/html-css%E6%80%BB%E7%BB%93/</id>
    <published>2020-03-06T02:01:22.000Z</published>
    <updated>2020-03-06T09:48:28.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="产品研发流程"><a href="#产品研发流程" class="headerlink" title="产品研发流程"></a>产品研发流程</h2><p>研发一个产品：收集用户意见-产出视觉稿-研发(前端研发，后端研发，算法研发)–测试无bug<br>【详细】1.了解用户需求<br>       2. 提出软件更新方向<br>       3. 向设计与研发提需求<br>       4. 视觉出产品视觉稿<br>       5. 开发由视觉稿和需求进行开发<br>       6. 开发完后进行测试<br>       7. 上线<br>   <a id="more"></a><br>   【产品研发岗位】产品经理，视觉，研发，测试<br>   【前端任务】从后端接收数据，将数据绘制在页面上，制作与用户相关的反馈与动效(对着设计图画网页)–页面<br>   【后端任务】–给前端提供数据(增删改查)–数据<br>   从数据库查询数据，提供给前端，从算法获取数据，一共给前端，维护数据库数据<br>   【算法】从数据库分析用户数据-得到一个模型提供给后端使用–由数据分析喜好</p><hr><h2 id="html学习"><a href="#html学习" class="headerlink" title="html学习"></a>html学习</h2><p>1.html不是编程语言，而是一种标记语言，使用标记标签来描述网页。html是页面骨架<br>2.网页由一系列标签构成，其标签由html定义<br>3.最常用的标签-块标签div,通用标签！！！–ppt中矩形<br>4.标签属性 属性=”属性值”，属性可以使标签有更多功能<br>5.VScode内写代码，在浏览器中运行–运行工具<br>6.img标签的属性src–图片地址,alt–可替换文本(解释图片)</p><h3 id="重点：拆解页面"><a href="#重点：拆解页面" class="headerlink" title="重点：拆解页面"></a>重点：拆解页面</h3><p>1.页面分块,对每一小块再进行细分(百度首页分三块)<br>2.布局:网页固定结构<br>3.设置盒模型属性与颜色(细节)</p><hr><h2 id="CSS学习"><a href="#CSS学习" class="headerlink" title="CSS学习"></a>CSS学习</h2><p>1.CSS–层叠样式表<br>2.样式优先级：行间&gt;id&gt;css&gt;class&gt;标签&gt;*</p><h3 id="行内元素-块元素-行内块元素"><a href="#行内元素-块元素-行内块元素" class="headerlink" title="行内元素,块元素,行内块元素"></a>行内元素,块元素,行内块元素</h3><p>行内元素：仅一行，不换行；不可设置宽高(可设置字号)，默认宽度为文字宽度，强调文本的span,strong标签<br>块元素：大部分 每个元素独占一行，接受宽高，默认父级宽高<br>行内块：具备宽高，不换行属性<br>行内元素特征：(1)设置宽高无效(2)对margin仅设置左右方向有效，上下无效；padding设置上下左右都有效，即会撑大空间(3)不会自动进行换行</p><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p>1.描述块的大小<br>内容-内边框padding-外边框margin-边框border<br>内容到边框的距离为宽度<br>页面大体布局：写好每个块的盒模型！！<br>盒模型属性：padding,margin,width,height等<br>2.html+css三种使用方式：<br>1)内联(标签的style属性)直接写在html内，不易维护;只作用于当前标签，不可样式复用<br>2)嵌入(style标签) 选择器与规则(1)中代码)<br>3)链接(link标签，css地址存放在href属性中)html与css分离</p><h3 id="css布局：操纵块"><a href="#css布局：操纵块" class="headerlink" title="css布局：操纵块"></a>css布局：操纵块</h3><p>1.position属性</p><ul><li><p>属性值：static,absolute(绝对，脱离原图层),relative(相对–移动元素后，元素本位置保留，相对原位置定位),fixed(固定–相对浏览器窗口定位)</p></li><li><p>设置postion不为static后，会激活top，left，right，bottom属性</p></li><li><p>设置position属性后会激活4个css属性：top,left,bottom,right,此块离上下左右的距离(absolute属性值相对于它的第一个position不为static的父元素，如果没有，就相对于body，即距离body-即页面的左上角)（relative属性值是相对于自身原位置）</p></li><li><p>使用：外相对，内绝对</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"box1"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">"box2"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">"box3"</span>&gt;&lt;/div&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  background: white;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#box1 &#123;</span></span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#box2 &#123;</span></span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: yellow;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 100px;</span><br><span class="line">  left:100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#box3 &#123;</span></span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.float属性(用的已不太多)<br> 属性值：none,left和right 元素浮到页面的左右侧 float:right;</p><h3 id="flex布局–弹性盒模型布局"><a href="#flex布局–弹性盒模型布局" class="headerlink" title="flex布局–弹性盒模型布局"></a>flex布局–弹性盒模型布局</h3><p>将【块】元素变得有弹性<br>1)display:flex;—–激活flex布局—一个大色块，可设置自身的宽高！子块相对于此父块<br>三个色块打包成一个块，设置1）则三块并列为一行;lex布局的元素会把自己的一级子元素排成一行，并将他们变成可以伸缩，易排列的盒子;<br>父元素默认充满宽度的<br>2)父元素使用最多的属性:justify-content和align-items<br>3)flex控制横向延展还是纵向延展的属性是flex-direction</p><ul><li>justify-content(横向):5个属性值</li></ul><p>1.flex-start：左对齐(默认)<br>2.flex-end：右对齐<br>3.center：居中<br>4.space-between：两端对齐，元素之间的间隔都相等<br>5.space-around：每个项目两侧的间隔相等<br>元素之间的间隔比元素与边框的间隔大一倍？？？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">display: flex;</span><br><span class="line">justify-content：flex-start;</span><br><span class="line">//justify-content: flex-end;</span><br><span class="line">//justify-content: center;</span><br><span class="line">//justify-content: space-between;</span><br><span class="line">//justify-content: space-around;</span><br><span class="line">//后面也可加</span><br><span class="line">background: green;</span><br><span class="line">height: 100px;</span><br></pre></td></tr></table></figure><ul><li>align-items(纵向):三个属性值</li></ul><p>1.flex-start：上对齐<br>2.flex-end：下对齐<br>3.center：居中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.box-container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">  align-items: flex-start;</span><br><span class="line">  // align-items: flex-end;</span><br><span class="line">  // align-items: center;</span><br><span class="line">  background: green;</span><br><span class="line">  height: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【作业】两色块并排：三种方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"box-container"</span>&gt;</span><br><span class="line">  &lt;div id=<span class="string">"box1"</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=<span class="string">"box2"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">1).box-container&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line">2) position: relative;</span><br><span class="line">  left: 100px;</span><br><span class="line">  top: -100px;</span><br><span class="line">3) position: absolute;</span><br><span class="line">  left: 100px;</span><br><span class="line">  top: 0;</span><br></pre></td></tr></table></figure><p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">推荐-flex布局</a></p>]]></content>
    
    <summary type="html">
    
      html与css的学习梳理
    
    </summary>
    
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>项目1-音乐播放器</title>
    <link href="http://yoursite.com/2020/03/05/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>http://yoursite.com/2020/03/05/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</id>
    <published>2020-03-05T04:02:24.000Z</published>
    <updated>2020-03-06T02:03:45.487Z</updated>
    
    <content type="html"><![CDATA[<p>目标：利用Vue的学习内容，完成大作业，制作一个音乐播放器(网易云)</p><h2 id="目标拆分"><a href="#目标拆分" class="headerlink" title="目标拆分"></a>目标拆分</h2><p>1.拆分组件(评论与进度条)<br>关键：理清哪一部分是进度条，哪一部分是评论，父子组件中如何实现的通信。<br>2.实现上下曲播放功能的切换<br>关键：所有歌存为一个数组songList【】,将每一首歌存为一个对象{}，含自身的name(歌曲名)，author,bgImg(封面),audio(播放地址),comments(评论),使用时songList[currentIndex].audio<br>注意在currentIndex在data中进行初始化！<br>3.一些细节<br>关于歌曲链接的存储，界面的优化等，本地存储如何写相对地址及怎么上传到云空间获取URL等，对目前已有框架的改进与优化等等。</p><a id="more"></a><ul><li><p><a href="https://www.cnblogs.com/pink-chen/p/11132940.html" target="_blank" rel="noopener">iconfont的使用</a></p></li><li><p>本地加载文件，如音乐链接,图片存放在src/assets下，新建文件夹img和music<br>使用时：import song1 from ‘./assets/music/1.mp3’ ,此时song1这个变量代表这个音乐的地址链</p><p>注：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  起初： </span><br><span class="line">&lt;div class=<span class="string">"bg"</span> style=<span class="string">"background-image: url(https://s2.ax1x.com/2020/01/27/1uPIAS.jpg)"</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 背景图片 错误写法：--&gt;</span><br><span class="line">  &lt;div class=<span class="string">"bg"</span> style=<span class="string">"background-image: url(songList[currentIndex].bgImg)"</span>&gt;&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  正确写法：</span><br><span class="line">   &lt;div class=<span class="string">"bg"</span> :style=<span class="string">"&#123;backgroundImage:'url(' + songList[currentIndex].bgImg + ')'&#125;"</span>&gt;&lt;/div&gt;</span><br><span class="line">分析：</span><br><span class="line">最开始只有一首歌，无需样式绑定，直接style=<span class="string">"backgroundImage:url(地址)"</span></span><br><span class="line">多首歌：v-bind的绑定格式</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目标：利用Vue的学习内容，完成大作业，制作一个音乐播放器(网易云)&lt;/p&gt;
&lt;h2 id=&quot;目标拆分&quot;&gt;&lt;a href=&quot;#目标拆分&quot; class=&quot;headerlink&quot; title=&quot;目标拆分&quot;&gt;&lt;/a&gt;目标拆分&lt;/h2&gt;&lt;p&gt;1.拆分组件(评论与进度条)&lt;br&gt;关键：理清哪一部分是进度条，哪一部分是评论，父子组件中如何实现的通信。&lt;br&gt;2.实现上下曲播放功能的切换&lt;br&gt;关键：所有歌存为一个数组songList【】,将每一首歌存为一个对象{}，含自身的name(歌曲名)，author,bgImg(封面),audio(播放地址),comments(评论),使用时songList[currentIndex].audio&lt;br&gt;注意在currentIndex在data中进行初始化！&lt;br&gt;3.一些细节&lt;br&gt;关于歌曲链接的存储，界面的优化等，本地存储如何写相对地址及怎么上传到云空间获取URL等，对目前已有框架的改进与优化等等。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue学习" scheme="http://yoursite.com/tags/Vue%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Vue作业" scheme="http://yoursite.com/tags/Vue%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习小结</title>
    <link href="http://yoursite.com/2020/03/03/Vue%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2020/03/03/Vue%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</id>
    <published>2020-03-03T08:09:12.000Z</published>
    <updated>2020-03-03T10:39:22.314Z</updated>
    
    <content type="html"><![CDATA[<p>1.前7天通过制作音乐播放器，学习Vue知识，对比原生JS,Vue框架更加简单，容易上手。</p><a id="more"></a><p>2.通过总结整理Vue笔记，理清播放器的架构，基本学习流程：<br> 1)更改歌曲与作者的名字-插值，认识Vue<br> 2)控制播放、暂停–audio标签及属性src,controls和方法play(),pause(),同时认识了三条指令：v-bind绑定属性，v-if控制元素渲染，v-on事件监听(此时监听的是click事件)<br> 3)CD旋转–每隔一段时间进行旋转角度的增加<br> CSS中transform:rotate(30deg)属性，及JS中的定时器selnterval(函数,时间间隔),v-bind的深度使用，绑定class和style属性<br> 4)进度条–(当前时间/总时间)*100的百分比</p><ul><li>audio的两个属性duration(总时间),currentTime(当前播放位置，即播放了的时间，其返回值一直随播放改变);</li><li>两个事件canplay:浏览器播放音频时(音乐播放开始时触发);timeupdata:当前播放位置发生更改时(在音乐播放过程中一直触发)</li><li>格式转换-因duration和currentTime返回的时间格式带小数点，不是常规格式，需转换为00:00</li><li>小圆点–播放进度百分比，计算属性computed<br>5)评论列表的展示(仅展示已有，不添加)–v-for列表渲染,对比原生JS的for循环+DOM操作(增加子节点，子节点添加内容)，Vue的v-for更简单方便,数据多以数组形式存放data中<br>6）发表评论(写评论并添加到5)的已有列表中)–v-bind双向绑定,实时更改评论内容,同时利用Data()对象来获取当前日期:var createAt = new Date().toLocaleDateString()</li></ul><p>3.还有三节视频将制作好的音乐播放器项目进行项目迁移及组件的通信与抽离，最后根据几天的学习内容，优化播放器<br>4.大作业要求</p><ul><li>将网站上的现有播放器代码迁移到本地 </li><li>抽离进度条为组件（思考这个组件该接受什么参数） </li><li>抽离评论列表为组件&amp;评论列表样式优化 </li><li>完成上一曲，下一曲切换功能（需要考虑边界情况）</li></ul><p>5.总结一下在写大作业中遇到的问题：<br>1).组件中传递的数据只能在原组件中进行更改，传过去的是拷贝份，不可更改！（只读不改）<br>2).抽成组件的意思是：把一部分内容进行封装，以标签形式在父组件中进行使用其显示效果同没抽掉之前相同<br>3). :audioInfo子组件的props中的属性=”audioInfo”父组件的属性值<br>4).关于上下切换，每一首歌的自身内容建议封装成一个对象，几首歌，几个对象<br>5)导入文件的方法，放入assets中，其中song为第一首歌的地址链接<br>import song from ‘./assets/music/1.mp3’<br>在data中<br>    song: [song, song1,],<br>6.刚学会写博客，一枚努力学前端的小白,摸索前进，要求自己坚持写博客，坚持反思，进一步有一步的欢喜<br>7.【收获】练习用VScode写.md文件,基本语法掌握的不太熟练，所以排版会有些丑，多见谅;梳理了近期学习的Vue知识,从整体到局部再到整体，对学过的知识和笔记二次加工，对知识的理解更透彻;锻炼自己的总结能力和表达能力<br>8.最后感谢小黑和Alex在学习前端路上的帮助，给他们的公共号做个推广<br><a href="https://mp.weixin.qq.com/s/W_KNZyAqktN371gqM-IpQg" target="_blank" rel="noopener">小黑的前端课程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.前7天通过制作音乐播放器，学习Vue知识，对比原生JS,Vue框架更加简单，容易上手。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue学习" scheme="http://yoursite.com/tags/Vue%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>我的Vue学习03</title>
    <link href="http://yoursite.com/2020/03/03/%E6%88%91%E7%9A%84Vue%E5%AD%A6%E4%B9%A0III/"/>
    <id>http://yoursite.com/2020/03/03/%E6%88%91%E7%9A%84Vue%E5%AD%A6%E4%B9%A0III/</id>
    <published>2020-03-03T04:01:47.000Z</published>
    <updated>2020-03-03T10:39:15.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5）实现评论列表–列表渲染"><a href="#5）实现评论列表–列表渲染" class="headerlink" title="5）实现评论列表–列表渲染"></a>5）实现评论列表–列表渲染</h2><h3 id="评论列表"><a href="#评论列表" class="headerlink" title="评论列表"></a>评论列表</h3><p>列表渲染：每个列表均由一系列相似的列表项组成</p><a id="more"></a><h4 id="原生JS的列表渲染-for循环-DOM操作"><a href="#原生JS的列表渲染-for循环-DOM操作" class="headerlink" title="原生JS的列表渲染(for循环 + DOM操作)"></a>原生JS的列表渲染(for循环 + DOM操作)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"comment-list"</span> id=<span class="string">"commentList"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//1.获取DOM</span><br><span class="line">var commentList =document.getElementById(<span class="string">'commentList'</span>);</span><br><span class="line">//2.定义数组--评论列表内容,每条内容为一个对象,每个对象均有自身名字，日期，评论</span><br><span class="line">var comments=[</span><br><span class="line">    &#123;</span><br><span class="line">    name: <span class="string">'汪小黑'</span>,</span><br><span class="line">    comment: <span class="string">'赞赞赞'</span>,</span><br><span class="line">    createdAt: <span class="string">'2019/10/10'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    name: <span class="string">'alex'</span>,</span><br><span class="line">    comment: <span class="string">'666'</span>,</span><br><span class="line">    createdAt: <span class="string">'2019/10/11'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    name: <span class="string">'小二黑'</span>,</span><br><span class="line">    comment: <span class="string">'23333'</span>,</span><br><span class="line">    createdAt: <span class="string">'2019/10/12'</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line">//3.评论列表渲染函数</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">commentListRender</span></span>()&#123;</span><br><span class="line">    //1).先清空</span><br><span class="line">    commentList.innerHTML=<span class="string">''</span>;</span><br><span class="line">    //2).利用<span class="keyword">for</span>循环导入内容</span><br><span class="line">    <span class="keyword">for</span> (i=0; i &lt; comments.length; i++) &#123;</span><br><span class="line">    // 创建列表项</span><br><span class="line">    var commentListItem = document.createElement(<span class="string">'div'</span>);</span><br><span class="line">    //为&lt;div&gt;元素增加class</span><br><span class="line">    commentListItem.classList.add(<span class="string">'comment-list__item'</span>);</span><br><span class="line">   //<span class="variable">$&#123;comments[i]&#125;</span>.name为模板字符串，总体看是两个大块，一块为人名+时间，一块为评论</span><br><span class="line">    commentListItem.innerHTML = `&lt;div class=<span class="string">"comment-list__item-meta"</span>&gt;</span><br><span class="line">            &lt;div class=<span class="string">"comment-list__item-meta__name"</span>&gt;<span class="variable">$&#123;comments[i].name&#125;</span>&lt;/div&gt;</span><br><span class="line">            &lt;div class=<span class="string">"comment-list__item-meta__date"</span>&gt;<span class="variable">$&#123;comments[i].createdAt&#125;</span>&lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;div class=<span class="string">"comment-list__item-comment"</span>&gt;<span class="variable">$&#123;comments[i].comment&#125;</span>&lt;/div&gt;</span><br><span class="line">          `;</span><br><span class="line">    // 将列表项添加到列表当中</span><br><span class="line">    commentList.appendChild(commentListItem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//4.最后调用该函数</span><br><span class="line">commentListRender();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue实现：列表渲染指令v-for"><a href="#Vue实现：列表渲染指令v-for" class="headerlink" title="Vue实现：列表渲染指令v-for"></a>Vue实现：列表渲染指令v-for</h3><p>1.使用：item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名。<br> v-for=”(comment, index) in comments”<br>在元素中渲染  ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">html中标签中</span><br><span class="line">v-for=<span class="string">"comment in comments"</span> &#123;&#123;comment.name&#125;&#125;</span><br><span class="line">Vue实例data中</span><br><span class="line"> // 评论</span><br><span class="line">    comments: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'汪小黑'</span>,</span><br><span class="line">        comment: <span class="string">'赞赞赞'</span>,</span><br><span class="line">        createdAt: <span class="string">'2019/10/10'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'alex'</span>,</span><br><span class="line">        comment: <span class="string">'666'</span>,</span><br><span class="line">        createdAt: <span class="string">'2019/10/11'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'小二黑'</span>,</span><br><span class="line">        comment: <span class="string">'23333'</span>,</span><br><span class="line">        createdAt: <span class="string">'2019/10/12'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    // 输入框的评论</span><br><span class="line">    inputtedComment: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>【总结】<br>v-bind用来绑定属性；v-if指令用来切换隐藏元素；v-on指令用来监听事件；v-for指令用来列表渲染<br>注：v-for不可在根元素上使用</p><h4 id="作业：渲染1-10-两种方法"><a href="#作业：渲染1-10-两种方法" class="headerlink" title="作业：渲染1-10(两种方法)"></a>作业：渲染1-10(两种方法)</h4><p>原生JS：获取节点，创建子节点，更改内容，添加子节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;原生JS&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">#app &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = document.getElementById(<span class="string">'app'</span>);</span><br><span class="line">        //</span><br><span class="line">        <span class="keyword">for</span> (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            var div = document.createElement(<span class="string">'div'</span>);//创建新节点</span><br><span class="line">            div.innerHTML = `&lt;div&gt;<span class="variable">$&#123;i+1&#125;</span>&lt;/div&gt;`;//这个格式很重要，尤其是``,不是单引号</span><br><span class="line">            //或者将上述语句换为 div.innerHTML = i+1;</span><br><span class="line">            app.appendChild(div);//添加节点</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Vue实现方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div v-for=<span class="string">"item in number"</span>&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">方案一：将列表内容直接写入data中</span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">            el: <span class="string">'#app'</span>,</span><br><span class="line">           data:&#123;  </span><br><span class="line">               number: [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">方案二：当数据多时，写函数</span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">            el: <span class="string">'#app'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                number: Array(),</span><br><span class="line">                //   number1:app.liClick(),写法错误，只能在外面调函数</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">liClick</span></span>() &#123;</span><br><span class="line">                    <span class="keyword">for</span> (var i = 0; i &lt; 100; i++)</span><br><span class="line">                        this.number = i + 1;</span><br><span class="line">                        <span class="built_in">return</span> this.number;</span><br><span class="line">                    &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">//Vue实例外部调函数</span><br><span class="line">app.liClick()//v-for遍历的是number是函数执行后的number</span><br></pre></td></tr></table></figure><hr><h2 id="6）实现发表评论–表单输入绑定v-model"><a href="#6）实现发表评论–表单输入绑定v-model" class="headerlink" title="6）实现发表评论–表单输入绑定v-model"></a>6）实现发表评论–表单输入绑定v-model</h2><p>v-model=”message” //绑定message变量</p><h3 id="添加评论-双向绑定评论数据"><a href="#添加评论-双向绑定评论数据" class="headerlink" title="添加评论(双向绑定评论数据)"></a>添加评论(双向绑定评论数据)</h3><p>1.点击发送按钮，在控制台打印输入内容<br>v-bind双向绑定，click为触发事件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;input v-model=<span class="string">" inputtedComment"</span> placeholder=<span class="string">"说点什么吧~~"</span>&gt; &lt;/input&gt;</span><br><span class="line">&lt;div class=<span class="string">"pub-button"</span> @click=<span class="string">"addComment"</span>&gt;发送&lt;/div&gt;</span><br><span class="line">//在控制台打印</span><br><span class="line"> <span class="function"><span class="title">addComment</span></span>() &#123;</span><br><span class="line">      console.log(this.inputtedComment)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>2.添加评论：改变comments数组，此数组内目前有三个对象，且每个对象目前有三个元素，其中有时间<br>v-for增加新对象,获取当前时间Date对象<br>关于为什么只修改时间：昵称固定，评论内容已有上步给出，仅剩获取当前时间<br>new Date()获得当前的日期<br>new Date().toLocaleDateString()可以获得当前年月日的一个字符串<br>【使用方法】var time = new Date().toLocaleDateString()<br><a href="https://www.w3school.com.cn/js/js_dates.asp" target="_blank" rel="noopener">Date()使用</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addComment</span></span>() &#123;</span><br><span class="line">    //获取当前时间</span><br><span class="line">      var createdAt = new Date().toLocaleDateString();</span><br><span class="line">      var name = <span class="string">'汪小黑'</span>;</span><br><span class="line">      this.comments.push(&#123;</span><br><span class="line">        name: name,</span><br><span class="line">        comment: this.inputtedComment,</span><br><span class="line">        createdAt: createdAt</span><br><span class="line">      &#125;);</span><br><span class="line">      this.inputtedComment = <span class="string">''</span>;//评论获取后清空</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>【作业补充】<br>1.下面是Date实例方法的为：<br>getDate()——以数值返回天（1-31）；getMonth()——获取月（0-11）；getTime()——获取时间（从 1970 年 1 月 1 日至今）；getMinutes()——获取分（0-59）。<br>2.有4种方法创建新的日期对象：<br>new Date()<br>new Date(year, month, day, hours, minutes, seconds, milliseconds)<br>new Date(milliseconds)—毫秒<br>new Date(date string)–从日期字符串中创建一个新的日期对象<br>3.获取昨天此刻时间<br>注：JS将日期存储为毫秒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 获取此刻的时间</span><br><span class="line">var now = new Date().getTime();</span><br><span class="line">// 获取昨天此刻的时间</span><br><span class="line">var yesterday = new Date(now - 24 * 3600 * 1000);//因为是毫秒，注意*1000</span><br><span class="line">// 打印时间</span><br><span class="line">console.log(yesterday.toLocaleString())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;5）实现评论列表–列表渲染&quot;&gt;&lt;a href=&quot;#5）实现评论列表–列表渲染&quot; class=&quot;headerlink&quot; title=&quot;5）实现评论列表–列表渲染&quot;&gt;&lt;/a&gt;5）实现评论列表–列表渲染&lt;/h2&gt;&lt;h3 id=&quot;评论列表&quot;&gt;&lt;a href=&quot;#评论列表&quot; class=&quot;headerlink&quot; title=&quot;评论列表&quot;&gt;&lt;/a&gt;评论列表&lt;/h3&gt;&lt;p&gt;列表渲染：每个列表均由一系列相似的列表项组成&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue学习" scheme="http://yoursite.com/tags/Vue%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>我的Vue学习02</title>
    <link href="http://yoursite.com/2020/03/02/%E6%88%91%E7%9A%84Vue%E5%AD%A6%E4%B9%A0II/"/>
    <id>http://yoursite.com/2020/03/02/%E6%88%91%E7%9A%84Vue%E5%AD%A6%E4%B9%A0II/</id>
    <published>2020-03-02T10:48:41.000Z</published>
    <updated>2020-03-03T10:39:18.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3）实现封面的自动旋转–class与style绑定"><a href="#3）实现封面的自动旋转–class与style绑定" class="headerlink" title="3）实现封面的自动旋转–class与style绑定"></a>3）实现封面的自动旋转–class与style绑定</h2><h3 id="css中控制元素旋转的transform-rotate属性"><a href="#css中控制元素旋转的transform-rotate属性" class="headerlink" title="css中控制元素旋转的transform:rotate属性"></a>css中控制元素旋转的transform:rotate属性</h3><p>1)语法：transform:rotate(30deg)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[css]</span><br><span class="line">.CD2 &#123;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">  transform: rotate(180deg);//顺时针旋转180度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="原生JS实现自动旋转（DOM操作）"><a href="#原生JS实现自动旋转（DOM操作）" class="headerlink" title="原生JS实现自动旋转（DOM操作）"></a>原生JS实现自动旋转（DOM操作）</h4><p>核心：封面CD旋转角度的不断增加，即定时增加元素的transform属性：rotate角度<br>实现：修改元素的style属性<br>obj.style.transform=”rotate(30deg)”  </p><h5 id="JS中定时器相关知识"><a href="#JS中定时器相关知识" class="headerlink" title="JS中定时器相关知识"></a>JS中定时器相关知识</h5><p>定时器：两种<br>1)仅执行一次就结束<br>2)每隔一段时间,重复执行某段代码（常用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">【用法】</span><br><span class="line">const number =setInterval(code(多为函数),时间间隔(ms));//设置定时器</span><br><span class="line">clearInterval(number);//清除定时器</span><br><span class="line">【举例--倒计时】</span><br><span class="line">&lt;div id=<span class="string">"container"</span>&gt;10&lt;/div&gt;</span><br><span class="line">【JS】</span><br><span class="line">var container = document.getElementById(<span class="string">'container'</span>);</span><br><span class="line">var i = 10;</span><br><span class="line">var number = setInterval(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  i--;</span><br><span class="line">  container.innerHTML = i;</span><br><span class="line">  <span class="keyword">if</span> (i &lt;= 0) &#123;</span><br><span class="line">    clearInterval(number);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure><h4 id="封面CD的自动旋转"><a href="#封面CD的自动旋转" class="headerlink" title="封面CD的自动旋转"></a>封面CD的自动旋转</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"main"</span>&gt;</span><br><span class="line">  &lt;div id=<span class="string">"CD"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style&gt;.main &#123;</span><br><span class="line">  margin: 0 4%;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#CD &#123;</span></span><br><span class="line">  height: 200px;</span><br><span class="line">  width: 200px;</span><br><span class="line">  background-color: white;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  background: center;</span><br><span class="line">  background-image: url(https://s2.ax1x.com/2020/01/27/1uPIAS.jpg);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 获取封面元素</span><br><span class="line">var <span class="built_in">cd</span> = document.getElementById(<span class="string">'CD'</span>);</span><br><span class="line">// 定义旋转间隔，单位ms，这里设定为每10ms旋转一次，间隔时间取值太大的话会使得旋转看起来有卡顿感</span><br><span class="line">var rotateDuration = 10;</span><br><span class="line">// 定义旋转角度变量</span><br><span class="line">var rotateDeg = 0;</span><br><span class="line">// 我们设定每60s封面旋转一圈，也就是360°</span><br><span class="line">// 这里计算的是每次旋转间隔需要旋转的度数</span><br><span class="line">var rotateStep = (360 / 60) * (rotateDuration / 1000);</span><br><span class="line"></span><br><span class="line">// 设定定时器，自动旋转</span><br><span class="line">setInterval(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  // 设定元素当前的旋转角度</span><br><span class="line">  cd.style.transform = <span class="string">'rotate('</span> + rotateDeg + <span class="string">'deg)'</span>;</span><br><span class="line">  // 旋转角度增加</span><br><span class="line">  rotateDeg += rotateStep;</span><br><span class="line">&#125;, rotateDuration)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="Vue实现自动旋转，绑定style属性"><a href="#Vue实现自动旋转，绑定style属性" class="headerlink" title="Vue实现自动旋转，绑定style属性"></a>Vue实现自动旋转，绑定style属性</h4><p>理解：Vue框架通过数据驱动来尽量屏蔽底层的DOM操作，将重复的DOM操作交给Vue框架自动完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue对style属性做了专门增强：字符串拼接、对象操作、数组操作（少）</span><br><span class="line">1)字符串<span class="string">''</span></span><br><span class="line"> v-bind:style=<span class="string">"'transform: rotate(' + rotateDeg + 'deg)'"</span></span><br><span class="line"> 说明：v-bind:style=<span class="string">"字符串"</span>，其中<span class="string">'transform: rotate('</span> + rotateDeg + <span class="string">'deg)'</span>为字符串，而<span class="string">' + rotateDeg + '</span>变量转字符串</span><br><span class="line">2)对象操作&#123;&#125;</span><br><span class="line"> v-bind:style=<span class="string">"&#123;</span></span><br><span class="line"><span class="string">        transform: 'rotate(' + rotateDeg + 'deg)'//类比原生JS内部格式</span></span><br><span class="line"><span class="string">      &#125;"</span></span><br><span class="line">      说明：类似CSS写法 属性：取值</span><br><span class="line">拓展--绑定一个对象变量rotateStyle</span><br><span class="line">v-bind:style=<span class="string">"rotateStyle"</span>，在Vue实例data中定义</span><br><span class="line">data: &#123;</span><br><span class="line">    rotateStyle: &#123;  //对象变量</span><br><span class="line">      transform: <span class="string">'rotate(90deg)'</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="实现自动旋转"><a href="#实现自动旋转" class="headerlink" title="实现自动旋转"></a>实现自动旋转</h3><p>核心：点播放按钮，旋转；暂停，停止旋转（清除定时器）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Vue使用：播放、暂停，旋转的切换day3&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .main &#123;</span><br><span class="line">        margin: 0 4%;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">#CD &#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        background-color: white;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        background: center;</span><br><span class="line">        background-image: url(https://s2.ax1x.com/2020/01/27/1uPIAS.jpg);</span><br><span class="line">      &#125;&lt;/style&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">        &lt;!--Vue的实现，绑定src--&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;!-- &lt;audio v-bind:src=<span class="string">"src"</span> controls&gt;&lt;/audio&gt; --&gt;</span><br><span class="line">        &lt;audio id=<span class="string">"player"</span> :src=<span class="string">"src"</span> &gt;&lt;/audio&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--v-on和v-if联合使用：点击按钮切换播放和暂停状态--&gt;</span><br><span class="line">        &lt;button v-if=<span class="string">"!isPlaying"</span>  v-on:click=<span class="string">"playMusic"</span>&gt;播放&lt;/button&gt;</span><br><span class="line">        &lt;button v-if=<span class="string">"isPlaying"</span>  @click=<span class="string">"pauseMusic"</span>&gt;暂停&lt;/button&gt;</span><br><span class="line">        &lt;!--加入CD旋转,绑定style的旋转属性(day3)--&gt;</span><br><span class="line">        &lt;div class=<span class="string">"main"</span>&gt;</span><br><span class="line">          &lt;div id=<span class="string">"CD"</span> v-bind:style=<span class="string">"&#123;</span></span><br><span class="line"><span class="string">            transform:'rotate('+rotateDeg+'deg)'&#125; "</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">         // var music=document.getElementById(<span class="string">'player'</span>);//能否加在外面？？不能，this指代不明</span><br><span class="line">        //点击按钮切换播放和暂停状态</span><br><span class="line">        var a= new Vue(&#123;</span><br><span class="line">            el:<span class="string">"#app"</span>,</span><br><span class="line">            data:&#123;  //注意data的书写</span><br><span class="line">                src:<span class="string">"http://static.xhxly.cn/0e669980-57ba-11ea-a658-e9f0035cbd09.mp3"</span>,</span><br><span class="line">                isPlaying:<span class="literal">false</span>,// 默认状态不播放----用于播放、暂停的切换</span><br><span class="line">              //初始化</span><br><span class="line">                rotateDeg:0,//旋转角度</span><br><span class="line">                 clockNum:0 //定时器</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123; //是methods，注意加s!!!</span><br><span class="line">                   <span class="function"><span class="title">playMusic</span></span>()&#123;</span><br><span class="line">                    var music=document.getElementById(<span class="string">'player'</span>);</span><br><span class="line">                      music.play();</span><br><span class="line">                      this.isPlaying=<span class="literal">true</span>;</span><br><span class="line">                      //封面开始旋转</span><br><span class="line">                      this.startRotate();</span><br><span class="line">                   &#125;,</span><br><span class="line">                   <span class="function"><span class="title">pauseMusic</span></span>()&#123;</span><br><span class="line">                    var music=document.getElementById(<span class="string">'player'</span>);</span><br><span class="line">                     music.pause();</span><br><span class="line">                     this.isPlaying=<span class="literal">false</span>;</span><br><span class="line">                     //封面暂停旋转</span><br><span class="line">                     this.pauseRotate();</span><br><span class="line">                   &#125;,</span><br><span class="line"></span><br><span class="line">                   //新增函数day3--旋转和暂停</span><br><span class="line">                   <span class="function"><span class="title">startRotate</span></span>()&#123;</span><br><span class="line">                     var rotateDuration=10;//10ms间隔</span><br><span class="line">                     var rotateStep=(360 /60)*(rotateDuration/1000);//每10ms旋转的角度</span><br><span class="line">                     //保存this--用于定时器内部</span><br><span class="line">                     var that=this;//很重要！！！！</span><br><span class="line"></span><br><span class="line">                     //设置定时器，自动旋转</span><br><span class="line">                     var clockNum=setInterval(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">                       that.rotateDeg += rotateStep;//外部的this,加的是间隔角度</span><br><span class="line">                     &#125;,rotateDuration);</span><br><span class="line"></span><br><span class="line">                       this.clockNum=clockNum;</span><br><span class="line">                      // ClockNum=clockNum;//用于暂停时,不推荐写，没有var定义，会默认挂在全局，即window.ClockNum</span><br><span class="line">                   &#125;,</span><br><span class="line"></span><br><span class="line">                   //暂停旋转封面</span><br><span class="line">                   <span class="function"><span class="title">pauseRotate</span></span>()&#123;</span><br><span class="line">                     clearInterval(this.clockNum);//注意this的使用！！！</span><br><span class="line">                    //  clearInterval(ClockNum);//普通变量似乎也行，局部变量没有作用域吗？这不是普通变量！！！</span><br><span class="line">                    //  clearInterval(clockNum);//不对，此时不可暂停</span><br><span class="line">                   &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="v-bind绑定class属性"><a href="#v-bind绑定class属性" class="headerlink" title="v-bind绑定class属性"></a>v-bind绑定class属性</h3><p>Vue中绑定class属性的方法（3种）<br>1.Js表达式 v-bind:class=”className”<br>【JS】<br>data: {<br>    className: ‘success tip’ //类名<br>  },<br>  【css】<br>  .success {<br>  color: green;<br>}<br>.tip {<br>  font-size: 30px;<br>}<br>[说明]:通过绑定Vue中className变量,来更改类名,对应到CSS中实现更改样式<br>2.对象绑定{类名：布尔值}<br>v-bind:class=”{fail: isFail, success: isSuccess, tip: isTip}”<br>data: {<br>    isFail: false,<br>    isSuccess: true,<br>    isTip: false,<br>  },<br>注：在CSS中有fail，success,tip三种类名<br>3.数组绑定(一次绑多个类名)是Js表达式的拓展<br>v-bind:class=”[className1, className2]”</p><hr><h2 id="4）实现进度条—计算属性"><a href="#4）实现进度条—计算属性" class="headerlink" title="4）实现进度条—计算属性"></a>4）实现进度条—计算属性</h2><h3 id="audio关于进度条的属性和方法"><a href="#audio关于进度条的属性和方法" class="headerlink" title="audio关于进度条的属性和方法"></a>audio关于进度条的属性和方法</h3><p>进度条：音乐总时间duration属性,当前已播放的时间currentTime属性<br>使用：event.target.duration;//target指向audio元素<br>两个事件：canplay: 浏览器播放音频时<br>         timeupdata:当前播放位置已更改时<br>使用–事件绑定： v-on:canplay=”handleCanPlay”<br>        v-on:timeupdate=”handleTimeUpdate”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var player = document.getElementById(<span class="string">'player'</span>);</span><br><span class="line">// 监听播放器的canplay事件</span><br><span class="line">player.oncanplay = <span class="keyword">function</span>(event) &#123;</span><br><span class="line">  console.log(<span class="string">'音频总时长（单位s/秒）：'</span>, event.target.duration);</span><br><span class="line">&#125;</span><br><span class="line">// 监听播放器的timeupdate事件</span><br><span class="line">player.ontimeupdate = <span class="keyword">function</span>(event) &#123;</span><br><span class="line">  console.log(<span class="string">'当前播放进度（单位s/秒）：'</span>, event.target.currentTime);</span><br><span class="line">&#125;</span><br><span class="line">【注】控制台会打印duration和currentTime结果</span><br></pre></td></tr></table></figure><h3 id="实现播放器的进度条"><a href="#实现播放器的进度条" class="headerlink" title="实现播放器的进度条"></a>实现播放器的进度条</h3><p>1.为将音频的duration和currentTime信息记录到实例Vue的data属性中，存为一个对象audioInfo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;  </span><br><span class="line">                //播放器相关信息</span><br><span class="line">                audioInfo:&#123;</span><br><span class="line">                    duration:0,</span><br><span class="line">                   currentTime:0</span><br><span class="line">                &#125;,</span><br><span class="line">           &#125;,</span><br></pre></td></tr></table></figure><p>2.事件监听 v-on:事件=”函数”<br> v-on:canplay=”handleCanPlay”<br> v-on:timeupdate=”handleTimeUpdate”<br>【补充】<br>浏览器的编程模型–事件驱动，通过监听用户触发的各种“事件”（点击，输入等），利用JS来监听各种事件信息，做出相应处理！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 监听音频可以播放时的事件</span><br><span class="line">  handleCanPlay(event) &#123;</span><br><span class="line">    this.audioInfo.duration = event.target.duration;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 监听音频播放位置发送改变的事件</span><br><span class="line">  handleTimeUpdate(event) &#123;</span><br><span class="line">    this.audioInfo.currentTime = event.target.currentTime;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>3.因原始的时间数据带小数点  0.4333(单位s)—转换格式00:00</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>  transferSecToTime(time) &#123;</span><br><span class="line">  var tempTime = Math.floor(time);//不可缺少，先取整</span><br><span class="line">  var min = 0;</span><br><span class="line">  var sec = 0;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tempTime &gt; 60) &#123;</span><br><span class="line">    min = Math.floor(tempTime / 60);//注意math的大小写</span><br><span class="line">    sec = tempTime % 60;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sec = tempTime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (min &lt; 10) min = <span class="string">'0'</span> + min</span><br><span class="line">  <span class="keyword">if</span> (sec &lt; 10) sec = <span class="string">'0'</span> + sec</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> min + <span class="string">':'</span> + sec</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(transferSecToTime(100))</span><br></pre></td></tr></table></figure><h3 id="计算属性-amp-进度条的实现"><a href="#计算属性-amp-进度条的实现" class="headerlink" title="计算属性&amp;进度条的实现"></a>计算属性&amp;进度条的实现</h3><p>核心：算一下进度条上小圆点的位置：即当前播放进度百分比（计算属性：数据改变，自动更新）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 计算属性，使用的时候和使用data里的数据一样，this.progress</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">progress</span></span>() &#123;</span><br><span class="line">      // 计算属性progress依赖了duration和currentTime两个数据，</span><br><span class="line">      // 因此，每当这两个数据当中任意一个发生改变时</span><br><span class="line">      // 计算属性progress都会重新求值</span><br><span class="line">      var duration = this.audioInfo.duration || 1;//防止除数为0</span><br><span class="line">      var currentTime = this.audioInfo.currentTime;</span><br><span class="line">      <span class="built_in">return</span> (currentTime / duration) * 100; //返回百分比</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>在渲染时，在html中找到关于描述小圆点的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//应用计算属性：progress() 的返回值</span><br><span class="line">    &lt;div class=<span class="string">"already-line"</span>  :style=<span class="string">"'width:' + progress + '%'"</span>&gt;&lt;/div&gt;</span><br><span class="line">         &lt;div class=<span class="string">"play-point"</span> :style=<span class="string">"'left:' + progress + '%'"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>【总代码】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Vue使用：day4&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .main &#123;</span><br><span class="line">        margin: 0 4%;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: flex-start;</span><br><span class="line">        align-items: center;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /*小圆点的样式*/</span><br><span class="line">      .already-line &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        height: 4px;</span><br><span class="line">        border-radius: 2px;</span><br><span class="line">        background-color: <span class="comment">#a9a39c;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .play-point &#123;</span><br><span class="line">        width: 6px;</span><br><span class="line">        height: 6px;</span><br><span class="line">        transition: all .2s linear;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        position: absolute;</span><br><span class="line">        background-color:blueviolet;</span><br><span class="line">&#125;</span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">        &lt;!--Vue的实现，绑定src--&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;!-- &lt;audio v-bind:src=<span class="string">"src"</span> controls&gt;&lt;/audio&gt; --&gt;</span><br><span class="line">        &lt;audio id=<span class="string">"player"</span> :src=<span class="string">"src"</span></span><br><span class="line">        v-on:canplay=<span class="string">"handleCanPlay"</span></span><br><span class="line">        v-on:timeupdate=<span class="string">"handleTimeUpdate"</span>&gt;&lt;/audio&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--v-on和v-if联合使用：点击按钮切换播放和暂停状态--&gt;</span><br><span class="line">        &lt;button v-if=<span class="string">"!isPlaying"</span>  v-on:click=<span class="string">"playMusic"</span>&gt;播放&lt;/button&gt;</span><br><span class="line">        &lt;button v-if=<span class="string">"isPlaying"</span>  @click=<span class="string">"pauseMusic"</span>&gt;暂停&lt;/button&gt;</span><br><span class="line">         &lt;!--进度条 小圆点--调用计算属性--&gt;</span><br><span class="line">         &lt;div class=<span class="string">"already-line"</span>  :style=<span class="string">"'width:' + progress + '%'"</span>&gt;&lt;/div&gt;</span><br><span class="line">         &lt;div class=<span class="string">"play-point"</span> :style=<span class="string">"'left:' + progress + '%'"</span>&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;&#123;&#123;TransferSecTotime(audioInfo.currentTime)&#125;&#125;/&#123;&#123;TransferSecTotime(audioInfo.duration)&#125;&#125;&lt;/div&gt;&lt;br/&gt;</span><br><span class="line">        &lt;!--进度条--&gt;</span><br><span class="line">        &lt;div class=<span class="string">'process'</span>&gt;</span><br><span class="line">            &lt;div&gt;音频总时长（单位s/秒）:&#123;&#123;TransferSecTotime(audioInfo.duration)&#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;当前播放进度(单位s/秒):&#123;&#123;TransferSecTotime(audioInfo.currentTime)&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">         // var music=document.getElementById(<span class="string">'player'</span>);//能否加在外面？？不能，this指代不明</span><br><span class="line">        //点击按钮切换播放和暂停状态</span><br><span class="line">        var a= new Vue(&#123;</span><br><span class="line">            el:<span class="string">"#app"</span>,</span><br><span class="line">            data:&#123;  //注意data的书写</span><br><span class="line">           // src:<span class="string">"http://q4v2i1axn.bkt.clouddn.com/music1.mp3"</span>,</span><br><span class="line">                src:<span class="string">"http://static.xhxly.cn/0e669980-57ba-11ea-a658-e9f0035cbd09.mp3"</span>,</span><br><span class="line">                isPlaying:<span class="literal">false</span>,// 默认状态不播放----用于播放、暂停的切换</span><br><span class="line">                 //播放器相关信息</span><br><span class="line">                 audioInfo:&#123;</span><br><span class="line">                     duration:0,</span><br><span class="line">                    currentTime:0</span><br><span class="line">                 &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line"> // 计算属性，使用的时候和使用data里的数据一样，this.progress</span><br><span class="line"> computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">progress</span></span>() &#123;</span><br><span class="line">      // 计算属性progress依赖了duration和currentTime两个数据，</span><br><span class="line">      // 因此，每当这两个数据当中任意一个发生改变时</span><br><span class="line">      // 计算属性progress都会重新求值</span><br><span class="line">      var duration = this.audioInfo.duration || 1;//音频未加载时，默认为0,不可做除数！！！</span><br><span class="line">      var currentTime = this.audioInfo.currentTime;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">return</span> (currentTime / duration) * 100;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">            methods:&#123; //是methods，注意加s!!!</span><br><span class="line">                   <span class="function"><span class="title">playMusic</span></span>()&#123;</span><br><span class="line">                    var music=document.getElementById(<span class="string">'player'</span>);</span><br><span class="line">                      music.play();</span><br><span class="line">                      this.isPlaying=<span class="literal">true</span>;</span><br><span class="line">                      //封面开始旋转</span><br><span class="line">                   &#125;,</span><br><span class="line">                   <span class="function"><span class="title">pauseMusic</span></span>()&#123;</span><br><span class="line">                    var music=document.getElementById(<span class="string">'player'</span>);</span><br><span class="line">                     music.pause();</span><br><span class="line">                     this.isPlaying=<span class="literal">false</span>;</span><br><span class="line">                     //封面暂停旋转</span><br><span class="line">                   &#125;,</span><br><span class="line">                    //新增</span><br><span class="line">                   // 监听音频可以播放时的事件，有event参数！！</span><br><span class="line">                    handleCanPlay(event)&#123;</span><br><span class="line">                     this.audioInfo.duration=event.target.duration;</span><br><span class="line">                   &#125;,</span><br><span class="line"></span><br><span class="line">                    // 监听音频播放位置发送改变的事件</span><br><span class="line">                    handleTimeUpdate(event)&#123;</span><br><span class="line">                      this.audioInfo.currentTime=event.target.currentTime;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    //将上述数字时间格式的转换 mm:ss</span><br><span class="line">                    TransferSecTotime(time)&#123;</span><br><span class="line">                        var tempTime=Math.floor(time);//取出时间只要整数秒！！！</span><br><span class="line">                        //初始化变量</span><br><span class="line">                        var min=0;</span><br><span class="line">                        var sec=0;</span><br><span class="line">                        //格式转换</span><br><span class="line">                        <span class="keyword">if</span>(tempTime &gt; 60)&#123;</span><br><span class="line">                            min= Math.floor(tempTime /60);//Math要大写！！长记性！！1</span><br><span class="line">                            sec=tempTime %60;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                         sec = tempTime;</span><br><span class="line">                         //字符串拼接</span><br><span class="line">                         <span class="keyword">if</span>(min&lt;10) min=<span class="string">'0'</span>+min;</span><br><span class="line">                         <span class="keyword">if</span>(sec&lt;10) sec=<span class="string">'0'</span>+sec;</span><br><span class="line">                         <span class="built_in">return</span> min +<span class="string">':'</span> +sec;</span><br><span class="line">                     &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="5）实现评论列表–列表渲染"><a href="#5）实现评论列表–列表渲染" class="headerlink" title="5）实现评论列表–列表渲染"></a>5）实现评论列表–列表渲染</h2><h2 id="6）实现发表评论–表单输入绑定"><a href="#6）实现发表评论–表单输入绑定" class="headerlink" title="6）实现发表评论–表单输入绑定"></a>6）实现发表评论–表单输入绑定</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;3）实现封面的自动旋转–class与style绑定&quot;&gt;&lt;a href=&quot;#3）实现封面的自动旋转–class与style绑定&quot; class=&quot;headerlink&quot; title=&quot;3）实现封面的自动旋转–class与style绑定&quot;&gt;&lt;/a&gt;3）实现封面的自动旋转–class与style绑定&lt;/h2&gt;&lt;h3 id=&quot;css中控制元素旋转的transform-rotate属性&quot;&gt;&lt;a href=&quot;#css中控制元素旋转的transform-rotate属性&quot; class=&quot;headerlink&quot; title=&quot;css中控制元素旋转的transform:rotate属性&quot;&gt;&lt;/a&gt;css中控制元素旋转的transform:rotate属性&lt;/h3&gt;&lt;p&gt;1)语法：transform:rotate(30deg)&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[css]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.CD2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  margin-left: 10px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  transform: rotate(180deg);//顺时针旋转180度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Vue学习" scheme="http://yoursite.com/tags/Vue%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>写博客随笔</title>
    <link href="http://yoursite.com/2020/03/02/%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2020/03/02/%E9%9A%8F%E7%AC%94/</id>
    <published>2020-03-02T07:42:15.000Z</published>
    <updated>2020-03-03T10:40:21.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用VScode写markdown"><a href="#利用VScode写markdown" class="headerlink" title="利用VScode写markdown"></a>利用VScode写markdown</h2><p>  通过百度和坚持使用，逐渐熟悉.md的格式，利用博客记录学习前端的过程，总结笔记，push自己走出舒适区</p><a id="more"></a><h2 id="为什么写博客"><a href="#为什么写博客" class="headerlink" title="为什么写博客"></a>为什么写博客</h2><p>  1）发现问题，解决问题，记录方法，分享借鉴</p><p>  2）在写作的过程中，再次梳理知识体系</p><p>  3）坚持学习，坚持记笔记，坚持动手测试</p><p>  4）最重要的是迈出第一步，之后进一寸有一寸的欢喜</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;利用VScode写markdown&quot;&gt;&lt;a href=&quot;#利用VScode写markdown&quot; class=&quot;headerlink&quot; title=&quot;利用VScode写markdown&quot;&gt;&lt;/a&gt;利用VScode写markdown&lt;/h2&gt;&lt;p&gt;  通过百度和坚持使用，逐渐熟悉.md的格式，利用博客记录学习前端的过程，总结笔记，push自己走出舒适区&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>我的Vue学习01</title>
    <link href="http://yoursite.com/2020/03/02/%E6%88%91%E7%9A%84Vue%E5%AD%A6%E4%B9%A0I/"/>
    <id>http://yoursite.com/2020/03/02/%E6%88%91%E7%9A%84Vue%E5%AD%A6%E4%B9%A0I/</id>
    <published>2020-03-02T07:40:01.000Z</published>
    <updated>2020-03-03T10:39:23.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="课程安排-9-1"><a href="#课程安排-9-1" class="headerlink" title="课程安排(9+1)"></a>课程安排(9+1)</h2><h2 id="1）播放器的页面信息展示–模板语法"><a href="#1）播放器的页面信息展示–模板语法" class="headerlink" title="1）播放器的页面信息展示–模板语法"></a>1）播放器的页面信息展示–模板语法</h2><p>vue:渐进式框架，省写dom操作<br>Vue框架的核心思想是数据驱动</p><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">插值：&#123;&#123;&#125;&#125;,内可为变量、单个表达式</span><br><span class="line">注：正确写法</span><br><span class="line">&#123;&#123; 1&gt;2 ? message : message + <span class="string">'1'</span> &#125;&#125;</span><br><span class="line">错误写法！！！</span><br><span class="line">1）不能为语句</span><br><span class="line">~~&#123;&#123;var a=1&#125;&#125;  ~~</span><br><span class="line">2）不能为多个表达式，以下为三元</span><br><span class="line">~~&#123;&#123;<span class="keyword">if</span> (ok)&#123;<span class="built_in">return</span> message&#125;&#125;&#125;  ~~</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//在html中</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt; &#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">//在js中</span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">    el：<span class="string">'#app'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        message:<span class="string">'你好'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">过程分析：1）html引入Vue库，在js中新建Vue实例，由el:<span class="string">'#app'</span>将页面上id=<span class="string">'app'</span>的节点绑定（即div标签）</span><br><span class="line">2）Vue实例监听data中message的改动---反应在&#123;&#123;message&#125;&#125;上</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">   &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">   &lt;h2&gt;&#123;&#123;message&#125;&#125;,啧啧啧&lt;/h2&gt;</span><br><span class="line">   &lt;!-- Mustache的语法不仅可以直接写变量，还可以写简单表达式 --&gt;</span><br><span class="line">   &lt;h2&gt;&#123;&#123;firstName + lastName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">   &lt;h2&gt;&#123;&#123;firstName + <span class="string">" "</span> + lastName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">   &lt;h2&gt;&#123;&#123;firstName&#125;&#125;&#123;&#123;lastName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">   &lt;h2&gt;&#123;&#123;count * 2&#125;&#125;&lt;/h2&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">关于计算(数值与字符串)</span><br><span class="line">其中 message:17</span><br><span class="line">1)&#123;&#123;message + <span class="string">'12'</span>&#125;&#125;-----1712</span><br><span class="line">2)&#123;&#123;message + 12&#125;&#125;----29</span><br><span class="line">若：message:<span class="string">'17'</span></span><br><span class="line">&#123;&#123;message + 12&#125;&#125;----1712</span><br></pre></td></tr></table></figure><h3 id="原生js-VS-vue"><a href="#原生js-VS-vue" class="headerlink" title="原生js VS vue"></a>原生js VS vue</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【目标】改变页面hello world</span><br><span class="line">先找此节点，再改节点内容</span><br><span class="line">**只改变message，页面自动变（仅关注数据）**</span><br></pre></td></tr></table></figure><hr><h2 id="2-实现点击播放音乐–指令-amp-事件监听"><a href="#2-实现点击播放音乐–指令-amp-事件监听" class="headerlink" title="2)实现点击播放音乐–指令&amp;事件监听"></a>2)实现点击播放音乐–指令&amp;事件监听</h2><h3 id="audio标签的学习"><a href="#audio标签的学习" class="headerlink" title="audio标签的学习"></a>audio标签的学习</h3><p>1.audio的属性使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=<span class="string">"http://q4v2i1axn.bkt.clouddn.com/music1.mp3"</span> controls&gt;&lt;/audio&gt;</span><br><span class="line">属性：1）src---资源位置</span><br><span class="line">2）controls--是否展示进度条</span><br><span class="line">进度条作用：控制音频的播放与暂停及当前的播放进度</span><br><span class="line">3）注：音乐播放器中的进度条与控制播放暂停自己定义，故删去controls属性</span><br></pre></td></tr></table></figure><p>2.audio标签的方法<br>play:播放音频<br>pause:暂停音频</p><h4 id="原生js写音乐播放器"><a href="#原生js写音乐播放器" class="headerlink" title="原生js写音乐播放器"></a>原生js写音乐播放器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">【html】</span><br><span class="line">&lt;audio id=<span class="string">"player"</span> src=<span class="string">"http://q4v2i1axn.bkt.clouddn.com/music1.mp3"</span>&gt;&lt;/audio&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"playMusic()"</span>&gt;播放&lt;/button&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"pauseMusic()"</span>&gt;暂停&lt;/button&gt;</span><br><span class="line">【js】</span><br><span class="line">//获取DOM节点</span><br><span class="line">var player = document.querySelector(<span class="string">'#player'</span>);</span><br><span class="line">// 播放音乐</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">playMusic</span></span>() &#123;</span><br><span class="line">  player.play();  // 调用play方法</span><br><span class="line">&#125;</span><br><span class="line">// 暂停播放</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">pauseMusic</span></span>() &#123;</span><br><span class="line">  player.pause();  // 调用pause方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue中的指令及事件监听"><a href="#Vue中的指令及事件监听" class="headerlink" title="Vue中的指令及事件监听"></a>Vue中的指令及事件监听</h3><p>指令：带v-前缀的特殊属性，常用v-bind,v-on,v-if<br>1)利用v-bind绑定属性，将audio标签中的src的属性值写入Vue实例的data中 v-bind:src(原标签属性)=’audio’(Vue实例data中定义的属性)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.v-bind用于绑定一个或多个属性值，开发中，常需要动态绑定src/href/类class/样式style</span><br><span class="line">2.语法糖:</span><br><span class="line">3.绑定class属性</span><br><span class="line">1)直接赋值class属性  &lt;h2 class=<span class="string">"active"</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">2）绑定一个，相比（1）没优点 &lt;h2 :class=<span class="string">"active"</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">3)v-bind动态绑定class属性（对象语法）&#123;&#125;</span><br><span class="line">&lt;h2 class=<span class="string">"title"</span> :class=<span class="string">"&#123;'active': isActive, 'line': isLine&#125;"</span>&gt;Hello World&lt;/h2&gt;</span><br><span class="line">4)v-bind动态绑定class(数组用法)--少[]</span><br><span class="line">&lt;h2 class=<span class="string">"title"</span> :class=<span class="string">"['active', 'line']"</span>&gt;Hello World&lt;/h2&gt; --[]加<span class="string">''</span>字符串，不加是变量</span><br><span class="line">5)v-bind动态绑定style(对象语法)</span><br><span class="line"> &lt;!-- &lt;h2 :style=<span class="string">"&#123;key(属性名):value(属性值)&#125;"</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line">    &lt;!--方法一 加单引号，当成字符串解析 --&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">"&#123;fontSize:'50px'&#125;"</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!--方法二 不加单引号，变量解析 --&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">"&#123;fontSize:fontSize&#125;"</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!--方法三 函数--&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">"getStyle()"</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">6)v-bind动态绑定style(数组语法)</span><br><span class="line"> &lt;!--两种方法--&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">"[baseStyle]"</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">"getStyle()"</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p>2)v-if:控制元素是否渲染(用的不多)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 v-if=<span class="string">"isFlag"</span>&gt;isFlag为<span class="literal">true</span>显示这个&lt;/h2&gt;</span><br><span class="line">v-if指令就是根据=号后边的变量的取值，来判断是否渲染这个元素【结合标签使用，决定html是否渲染此标签】</span><br><span class="line">1.&lt;!--​v-if用于条件判断，判断Dom元素是否显示。或者销毁元素或组件,单独使用v-if，变量为布尔值，为<span class="literal">true</span>才渲染Dom</span><br><span class="line">2. v-show的变量也是布尔值，为<span class="literal">true</span>才显示内容，类似css的display</span><br><span class="line">3. v-if、v-else、v-else-if联合使用相当于<span class="keyword">if</span>、elseif、<span class="keyword">else</span>，但是在条件比较多的时候建议使用计算属性--&gt;</span><br><span class="line">4. &lt;!-- 添加key主要是为了让vue不复用dom，如果不添加vue底层会复用dom --&gt;</span><br><span class="line"> &lt;!--v-if看似和v-show实现一样的效果，但是内部v-show只是用css将操作的元素隐藏显示，</span><br><span class="line">    而v-if是新增和删除元素。v-show只是操作元素的style属性display，都没会被创建--&gt;</span><br></pre></td></tr></table></figure><p>3)v-on:事件监听<br>v-on:事件名=”函数名”（定义在methods中，不加())</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1.参数传参</span><br><span class="line"> &lt;!-- 事件没传参，两种方式均可 --&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"btnClick"</span>&gt;按钮1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"btnClick()"</span>&gt;按钮2&lt;/button&gt;</span><br><span class="line">    &lt;!-- 事件调用方法传参，写函数时候省略小括号，但是函数本身需要传递一个参数 --&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"btnClick2(123)"</span>&gt;按钮3&lt;/button&gt;</span><br><span class="line">    &lt;!--报错、默认将原生事件event传递,同按钮6前半部分--&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"btnClick2()"</span>&gt;按钮4&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"btnClick2"</span>&gt;按钮5&lt;/button&gt;</span><br><span class="line">    &lt;!-- 事件调用时候需要传入event还需要传入其他参数 ，如何手动的获取到浏览器参数的event对象: <span class="variable">$event</span>--&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"btnClick3(<span class="variable">$event</span>,123)"</span>&gt;按钮6&lt;/button&gt;</span><br><span class="line">2.v-on的修饰符的使用</span><br><span class="line">&lt;!--1. 点击--.stop的使用，btn的click事件不会传播，不会冒泡到上层，调用event.stopPropagation() --&gt;</span><br><span class="line">    &lt;div @click=<span class="string">"divClick"</span>&gt;</span><br><span class="line">        &lt;button @click.stop=<span class="string">"btnClick"</span>&gt;按钮1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 2. 提交--.prevent 调用event.preventDefault阻止默认行为  --&gt;</span><br><span class="line">    &lt;form action=<span class="string">"www.baidu.com"</span>&gt;</span><br><span class="line">      &lt;button <span class="built_in">type</span>=<span class="string">"submit"</span> @click.prevent=<span class="string">"submitClick"</span>&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;!--3. 文本框---监听键盘的事件 --&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> @click.enter=<span class="string">"key-up"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="补充拓展–监听元素的点击事件"><a href="#补充拓展–监听元素的点击事件" class="headerlink" title="补充拓展–监听元素的点击事件"></a>补充拓展–监听元素的点击事件</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[原生js]</span><br><span class="line">1.直接写在html上---onclick</span><br><span class="line">&lt;button onclick=<span class="string">"click()"</span>&gt;click-me&lt;/button&gt;</span><br><span class="line">2.指定onclick属性</span><br><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;click-me&lt;/button&gt;</span><br><span class="line">var btn=document.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.onclick=<span class="function"><span class="title">function</span></span>()&#123;&#125;</span><br><span class="line">3.调用addEventListener方法</span><br><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;click-me&lt;/button&gt;</span><br><span class="line">var btn=document.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="title">function</span></span>()&#123;&#125;)</span><br><span class="line">注：2.3方法的区别，更习惯于用2，3可以加多个函数！但兼容性问题</span><br><span class="line">4.Vue框架--v-on事件绑定</span><br><span class="line">&lt;button v-on:click=<span class="string">"click"</span>&gt;click-me&lt;/button&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="3）实现封面的自动旋转–class与style绑定"><a href="#3）实现封面的自动旋转–class与style绑定" class="headerlink" title="3）实现封面的自动旋转–class与style绑定"></a>3）实现封面的自动旋转–class与style绑定</h2><h2 id="4）实现进度条—计算属性"><a href="#4）实现进度条—计算属性" class="headerlink" title="4）实现进度条—计算属性"></a>4）实现进度条—计算属性</h2><h2 id="5）实现评论列表–列表渲染"><a href="#5）实现评论列表–列表渲染" class="headerlink" title="5）实现评论列表–列表渲染"></a>5）实现评论列表–列表渲染</h2><h2 id="6）实现发表评论–表单输入绑定"><a href="#6）实现发表评论–表单输入绑定" class="headerlink" title="6）实现发表评论–表单输入绑定"></a>6）实现发表评论–表单输入绑定</h2><h2 id="7）-视频-本地搭建vue-Hello-World"><a href="#7）-视频-本地搭建vue-Hello-World" class="headerlink" title="7）[视频]本地搭建vue Hello World"></a>7）[视频]本地搭建vue Hello World</h2><h2 id="8）-视频-迁移项目到本地"><a href="#8）-视频-迁移项目到本地" class="headerlink" title="8）[视频]迁移项目到本地"></a>8）[视频]迁移项目到本地</h2><h2 id="9）-视频-抽离子组件（父子组件的通信）"><a href="#9）-视频-抽离子组件（父子组件的通信）" class="headerlink" title="9）[视频]抽离子组件（父子组件的通信）"></a>9）[视频]抽离子组件（父子组件的通信）</h2><h2 id="10）大作业"><a href="#10）大作业" class="headerlink" title="10）大作业"></a>10）大作业</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;课程安排-9-1&quot;&gt;&lt;a href=&quot;#课程安排-9-1&quot; class=&quot;headerlink&quot; title=&quot;课程安排(9+1)&quot;&gt;&lt;/a&gt;课程安排(9+1)&lt;/h2&gt;&lt;h2 id=&quot;1）播放器的页面信息展示–模板语法&quot;&gt;&lt;a href=&quot;#1）播放器的页面信息展示–模板语法&quot; class=&quot;headerlink&quot; title=&quot;1）播放器的页面信息展示–模板语法&quot;&gt;&lt;/a&gt;1）播放器的页面信息展示–模板语法&lt;/h2&gt;&lt;p&gt;vue:渐进式框架，省写dom操作&lt;br&gt;Vue框架的核心思想是数据驱动&lt;/p&gt;
&lt;h3 id=&quot;模板语法&quot;&gt;&lt;a href=&quot;#模板语法&quot; class=&quot;headerlink&quot; title=&quot;模板语法&quot;&gt;&lt;/a&gt;模板语法&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;插值：&amp;#123;&amp;#123;&amp;#125;&amp;#125;,内可为变量、单个表达式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注：正确写法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; 1&amp;gt;2 ? message : message + &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt; &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;错误写法！！！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1）不能为语句&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;~~&amp;#123;&amp;#123;var a=1&amp;#125;&amp;#125;  ~~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2）不能为多个表达式，以下为三元&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;~~&amp;#123;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ok)&amp;#123;&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; message&amp;#125;&amp;#125;&amp;#125;  ~~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Vue学习" scheme="http://yoursite.com/tags/Vue%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
